<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kahoku丶懒`Blong</title>
  <icon>https://www.gravatar.com/avatar/4be4e7cb96975b93d296721d3973e199</icon>
  <subtitle>此人极其懒，请勿期待更新……</subtitle>
  <link href="https://acgnliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://acgnliu.github.io/"/>
  <updated>2023-03-16T12:02:26.000Z</updated>
  <id>https://acgnliu.github.io/</id>
  
  <author>
    <name>刘星宇</name>
    <email>283977856@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://acgnliu.github.io/posts/0.html"/>
    <id>https://acgnliu.github.io/posts/0.html</id>
    <published>2023-03-16T12:02:26.000Z</published>
    <updated>2023-03-16T12:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-gitignore文件的配置使用"><a href="#Git-gitignore文件的配置使用" class="headerlink" title="[Git].gitignore文件的配置使用"></a><code>[Git].gitignore</code>文件的配置使用</h1><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><ul><li><code>.gitignore</code>文件： 可以设置相应的忽略规则，在使用<code>git add .</code>的时候忽略这些文件的提交。</li><li><code>git add -f</code>可以强制添加被<code>.gitignore</code>设置了忽略规则的文件</li><li><code>可使用git config --global core.excludesfile ~/.gitignore</code>指令定义Git全局的 <code>.gitignore</code> 文件</li><li>也可以当前项目下的 <code>.git/info/exclude</code>文件，将需要忽略提交的文件写入其中，已实现相同功能</li></ul><h5 id="二、使用方法演示"><a href="#二、使用方法演示" class="headerlink" title="二、使用方法演示"></a>二、使用方法演示</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dir 不需要提交的目录</span></span><br><span class="line">/node_modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># file 不需要提交的文件</span></span><br><span class="line">config.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># log 不需要提交的任意包含后缀名为log的文件</span></span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files 不需要提交的任意包含后缀名为jar的文件</span></span><br><span class="line">*.jar</span><br></pre></td></tr></table></figure><h5 id="三、使用方法详解"><a href="#三、使用方法详解" class="headerlink" title="三、使用方法详解"></a>三、使用方法详解</h5><ol><li></li><li></li><li><p><strong><code>.gitignore</code>语法</strong></p><ul><li><code>#</code>： 注释</li><li><code>*</code>： 匹配0个或多个任意字符</li><li><code>!</code>： 不忽略，例如：!1.txt,  表示不忽略1.txt文件，git add 可以正常添加此文件。</li><li><code>\</code>:  以<code>\</code>开头表示目录， 目录以<code>\</code>结尾只忽略目录下的文件，不忽略此目录</li></ul></li></ol><p><a href="https://juejin.cn/post/7155653345813168142">https://juejin.cn/post/7155653345813168142</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-gitignore文件的配置使用&quot;&gt;&lt;a href=&quot;#Git-gitignore文件的配置使用&quot; class=&quot;headerlink&quot; title=&quot;[Git].gitignore文件的配置使用&quot;&gt;&lt;/a&gt;&lt;code&gt;[Git].gitignore&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://acgnliu.github.io/posts/0.html"/>
    <id>https://acgnliu.github.io/posts/0.html</id>
    <published>2023-03-16T07:55:26.000Z</published>
    <updated>2023-03-16T07:55:26.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://acgnliu.github.io/posts/0.html"/>
    <id>https://acgnliu.github.io/posts/0.html</id>
    <published>2023-03-16T04:23:44.000Z</published>
    <updated>2023-03-16T04:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLOv5模型：-环境部署"><a href="#YOLOv5模型：-环境部署" class="headerlink" title="YOLOv5模型： 环境部署"></a>YOLOv5模型： 环境部署</h1><h3 id="一、🏴总概述-教程原文链接"><a href="#一、🏴总概述-教程原文链接" class="headerlink" title="一、🏴总概述  教程原文链接"></a>一、🏴总概述  <a href="https://aitechtogether.com/article/32386.html">教程原文链接</a></h3><ol><li>✨GPU/CPU环境详解及安装</li><li>✨GPU/CPU环境详解及安装</li><li>🌟Labelimg数据标注及数据转化</li></ol><h3 id="二、✨GPU-CPU环境详解及安装"><a href="#二、✨GPU-CPU环境详解及安装" class="headerlink" title="二、✨GPU/CPU环境详解及安装"></a>二、✨GPU/CPU环境详解及安装</h3><ol><li><p>什么是CPU？什么GPU？</p><ul><li>CPU主要用于串行运算；而GPU则是大规模并行运算。由于<a href="https://aitechtogether.com/tag/深度学习">深度学习</a>中样本量巨大，参数量也很大，所以GPU的作用就是加速网络运算</li><li>CPU计算神经网络也是可以的，算出来的神经网络放到实际应用中效果也很好，只不过速度会很慢罢了。而目前GPU运算主要集中在矩阵乘法和卷积上，其他的逻辑运算速度并没有CPU快</li></ul></li><li><p>我该选择使用GPU还是CPU？</p><ul><li>GPU和CPU的选择一方面看自己的需求，另一方面取决于自己的PC性能（如果你拥有一块RTX3060，而你刚好对深度学习感兴趣，那你有什么利用不利用起来它呢）。</li></ul></li><li><p>怎么安装GPU环境</p><ol><li><p>安装GPU环境需要我们首先安装CUDA和CUDNN</p><ul><li>CUDA: ComputeUnified Device Architecture)，是显卡厂商NVIDIA推出的运算平台。 CUDA是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。</li><li>CUDNN:NVIDIA cuDNN是用于深度神经网络的GPU加速库。它强调性能、易用性和低内存开销。</li></ul></li><li><p>​    查看本机显卡</p><ul><li>首先我们要确定本机是否有独立显卡，在<code>计算机管理-设备管理器-显示适配器</code>中，查看是否有独立显卡</li><li>如下图所示：可以看到本机有一个集成显卡和独立显卡<code>NVIDIA GetForce GTX 1050</code>。</li><li><img src="https://aitechtogether.com/wp-content/uploads/2022/05/954b992d-e5c0-4386-8586-9786586f4d55.webp" alt="img"></li></ul></li><li><p>​    查询是否支持CUDA安装</p><ol><li>进入：<a href="https://developer.nvidia.com/cuda-gpus">https://developer.nvidia.com/cuda-gpus</a> ：从下图中，从上图中，可以看到我本机的独立显卡是支持<code>CUDA</code>安装的，计算力是<code>6.1</code>。<ul><li><img src="https://aitechtogether.com/wp-content/uploads/2022/05/80169db8-01f8-4886-bcca-e123f0194ee1.webp" alt="img"></li><li><img src="https://aitechtogether.com/wp-content/uploads/2022/05/f9c3701f-d144-469c-9b84-0110479b5fd9.webp" alt="img"></li></ul></li></ol></li><li><p>CUDA下载</p><ol><li>进入<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a> ：在这里会有众多CUDA版本，关于如何选择，我不能给出详细说法，只能说说我的理解。（<code>CUDA的安装主要取决于个人使用要求和硬件性能，如你是RTX3060及以上的30系显卡我推荐你安装CUDA11.x，如果你像我一样是RTX1050这样不太高端显卡，选择CUDA9.x和CUDA10.x均可以,以我的习惯就是下载CUDA10.2</code>）<ul><li><img src="https://aitechtogether.com/wp-content/uploads/2022/05/69ec64d1-f18d-40cb-a818-733503df572a.webp" alt="img"></li><li><em>从上到下<em>*依次单击选择</em></em>：<code>Operating System</code>、<code>Architecture</code>、<code>Version</code>、<code>Installer Type</code>、“Download`。等待下载，下载完成后你就会获得安装包。</li><li><img src="https://aitechtogether.com/wp-content/uploads/2022/05/5cb89445-c851-4542-8420-28719126c663.webp" alt="img"></li></ul></li></ol></li><li><p>CUDA安装</p><ol><li><p>双击打开，显示解压安装目录，<strong>不需要改变，默认即可</strong>。</p><p><img src="https://aitechtogether.com/wp-content/uploads/2022/05/39e65fd2-1e5e-4804-b70a-14f84173c8b1.webp" alt="img"></p></li><li><p>默认安装，保证后续过程不会出现太多其他不必要的问题！</p></li><li><p>接下来，进入<code>NVIDIA</code>安装过程，在这安装过程中，我一开始直接选择的精简安装，如果由于VS的原因，导致无法正常安装，可以换成自定义的安装方式，并将VS勾给去掉，便可以正常安装了，至于CUDA的安装目录，大家默认安装在C盘即可。</p></li><li><p><img src="https://aitechtogether.com/wp-content/uploads/2022/05/8663c9b2-e31a-4707-aa2e-bf564ffa3e41.webp" alt="img"></p></li></ol></li><li><p>CUDA环境变量设置</p><ol><li><p>安装完成之后，便是配置环境变量。方法为：<code>右键我的电脑</code>–<code>属性</code>–<code>高级系统设置</code>–<code>环境变量</code>–<code>系统变量</code>–<code>找到变量名为PATH</code>–<code>双击打开</code>，添加以下环境变量。</p><p><img src="https://aitechtogether.com/wp-content/uploads/2022/05/8104fb94-53b2-41e1-822a-0bd8bbef2c52.webp" alt="img"></p><ul><li><p>新增变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\lib\x64</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\lib</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\libnvvp</span><br></pre></td></tr></table></figure></li><li><p>测试安装, 有以下输出即为安装正确！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nvcc -V</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Wed_Oct_23_19:32:27_Pacific_Daylight_Time_2019</span><br><span class="line">Cuda compilation tools, release 10.2, V10.2.89</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>CUDNN下载</p><ol><li><p>进入<a href="https://developer.nvidia.com/zh-cn/cudnn">https://developer.nvidia.com/zh-cn/cudnn</a> ，点击<code>下载cuDNN</code>会出现</p></li><li><p>这里写的很明白，就是必须你注册登录账户才有资格下载，因此你注册一个账户登录进去即可！</p><p><img src="https://aitechtogether.com/wp-content/uploads/2022/05/b99810f8-f1dc-47a8-aa4e-ab32b51fdcdd.webp" alt="img"></p></li><li><p>登录进去以后，点击选择相应的下载即可，但是要注意：<strong>CUDA的版本与CUDNN的版本要一致</strong></p><ul><li>在要下载的CUDNN的点击名称最后会有<code>CUDA 10.0</code>或者<code>CUDA 10.2</code>这样的后缀，这就是代表与相应CUDA对应版本的CUDNN。</li></ul></li></ol></li><li><p>CUDNN安装</p><ol><li>下载之后，你会得到一个zip的压缩包。解压缩，将CUDNN压缩包里面的<code>bin</code>、<code>include</code>、<code>lib</code>三整个文件夹直接复制到<code>CUDA的安装目录</code>下，<strong>覆盖掉原来CUDA的这三个文件夹</strong> 即可。</li></ol></li><li><p>GPU版本的Pytorch安装</p><ol><li><p>🟢在线安装</p><ol><li><p>有了本地的GPU环境，我们就可以安装<code>GPU版本的Pytorch了</code>。进入<a href="https://pytorch.org/">https://pytorch.org/</a> ，点击<code>INXTALL</code>：</p><p><img src="https://aitechtogether.com/wp-content/uploads/2022/05/d563d4be-abff-484f-b47e-88ffb8e25a6b.webp" alt="img"></p></li><li><p>根据自己的需求和安装的CUDA的版本对应安装Pytorch，复制输出的命令即可。如果下方<strong>Run this Command</strong>提醒<strong>CUDA-10.2 PyTorch builds are no longer available for Windows, please use CUDA-11.3 ，</strong> 可以访问：<a href="https://pytorch.org/get-started/previous-versions/">https://pytorch.org/get-started/previous-versions/</a> 查找之前的版本在线安装。</p></li></ol></li><li><p>🟡离线安装</p><ol><li><p>📌 方法一：进入官网下载地址，<a href="https://download.pytorch.org/whl/torch/">torch安装包列表</a> | <a href="https://download.pytorch.org/whl/torchvision/">torchvision安装包列表</a></p></li><li><p>📌 方法二：进入官网指定的CUDA版本下载地址：<a href="https://download.pytorch.org/whl/cu113/torch_stable.html">https://download.pytorch.org/whl/cu113/torch_stable.html</a> （以CUDA11.3为例）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 标*部分可以根据自己的CUDA型号进行搜索，比如CUDA 10.2对应为102，CUDA11.3对应为113</span><br><span class="line">https://download.pytorch.org/whl/cu***/torch_stable.html</span><br></pre></td></tr></table></figure></li><li><p>根据自己的实验环境，包括操作系统、CUDA类型、Python版本等，选择安装的<code>torch</code>和<code>torchvision</code>的安装包</p><p><img src="https://aitechtogether.com/wp-content/uploads/2022/05/fa5f2c6f-cd72-46b9-a489-90b1bf44af19.webp" alt="img"></p></li><li><p>```python<br>pip install ./torch-<strong><em>.whl # 先安装<br>pip install ./torchvision-</em></strong>.whl # 后安装</p><h1 id="注意：这里存在安装顺序，由于torch是torchvision的上级安装包，如果先安装torchvision，则会自动下载torch安装-包。因此先安装torch，再安装torchvision"><a href="#注意：这里存在安装顺序，由于torch是torchvision的上级安装包，如果先安装torchvision，则会自动下载torch安装-包。因此先安装torch，再安装torchvision" class="headerlink" title="注意：这里存在安装顺序，由于torch是torchvision的上级安装包，如果先安装torchvision，则会自动下载torch安装# 包。因此先安装torch，再安装torchvision"></a>注意：这里存在安装顺序，由于torch是torchvision的上级安装包，如果先安装torchvision，则会自动下载torch安装# 包。因此先安装torch，再安装torchvision</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">         5. 👉最后，给大家放一个Pytorch和torchvision对应的版本表：https://github.com/pytorch/pytorch/wiki/PyTorch-Versions</span><br><span class="line"></span><br><span class="line">            至此，所有比较麻烦的环境安装问题基本解决完成了，接下来我们就可以去找数据、标数据、训数据了。</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">## 三、🌟Labelimg数据标注及数据转化</span><br><span class="line"></span><br><span class="line">1. 初识Labelimg</span><br><span class="line"></span><br><span class="line">   - 用于深度网络训练的数据集做标注的方法和工具有好多，像Labelme、labelImg、yolo_mark、Vatic、Sloth等等，此处暂时只介绍其中的一种标注工具：labelImg。👁️‍🗨️[中文版本的labelImg下载](https://mianbaoduo.com/o/bread/mbd-YpqZm5lx)</span><br><span class="line"></span><br><span class="line">     ![img](https://aitechtogether.com/wp-content/uploads/2022/05/3f601c82-5884-485f-9096-5e4d761ef477.webp)</span><br><span class="line"></span><br><span class="line">   - [Labelimg](https://github.com/tzutalin/labelImg) 是一款开源的数据标注工具，可以标注三种格式：</span><br><span class="line"></span><br><span class="line">     1. PascalVOC标签格式，保存为xml文件</span><br><span class="line">     2. YOLO标签格式，保存为txt文件</span><br><span class="line">     3. CreateML标签格式，保存为json文件images</span><br><span class="line"></span><br><span class="line">2. Labelimg标注</span><br><span class="line"></span><br><span class="line">   1. 我们找一个新的位置，新建两个文件夹：存放图片：`images`，存放标签：`labels`，然后打开labelimg进行标注就可以了。</span><br><span class="line"></span><br><span class="line">      ```bash</span><br><span class="line">      .</span><br><span class="line">      │</span><br><span class="line">      ├─images</span><br><span class="line">      ├─ 1.jpg</span><br><span class="line">          ├─ 2.jpg</span><br><span class="line">          ├─ 3.jpg</span><br><span class="line">              ...</span><br><span class="line">      └─labels</span><br><span class="line">      ├─ 1.txt</span><br><span class="line">          ├─ 2.txt</span><br><span class="line">          ├─ 3.txt</span><br><span class="line">      </span><br><span class="line">      # 注意如果你发现你的图片的后缀不一致，最好是修改成一样的，避免后续的麻烦！！！（可以看到我这里JPEGImages文件夹下都是.jpg结尾的）</span><br><span class="line">      # bach脚本（这里的意思是将.jpg修改成.jpeg） </span><br><span class="line">      &gt;&gt;&gt;ren *.jpg *.jpeg </span><br><span class="line">        </span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>超级详细的标注过程看这里：<a href="https://blog.csdn.net/shuiyixin/article/details/82623613">YOLO数据集制作1（含LabelImg工具讲解）</a></p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YOLOv5模型：-环境部署&quot;&gt;&lt;a href=&quot;#YOLOv5模型：-环境部署&quot; class=&quot;headerlink&quot; title=&quot;YOLOv5模型： 环境部署&quot;&gt;&lt;/a&gt;YOLOv5模型： 环境部署&lt;/h1&gt;&lt;h3 id=&quot;一、🏴总概述-教程原文链接&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://acgnliu.github.io/posts/0.html"/>
    <id>https://acgnliu.github.io/posts/0.html</id>
    <published>2023-03-16T03:58:34.000Z</published>
    <updated>2023-03-16T03:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLO-使用detect-py-推理模型"><a href="#YOLO-使用detect-py-推理模型" class="headerlink" title="YOLO: 使用detect.py 推理模型"></a>YOLO: 使用detect.py 推理模型</h1><h3 id="一、模型推理基本命令"><a href="#一、模型推理基本命令" class="headerlink" title="一、模型推理基本命令"></a>一、模型推理基本命令</h3><ol><li><p><code>bash</code><strong>命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台指令</span></span><br><span class="line">python detect.py  --weights <span class="string">&quot;模型文件&quot;</span> --<span class="built_in">source</span> <span class="string">&quot;输入文件&quot;</span> --class_dir <span class="string">&quot;输出文件&quot;</span> --conf-thres 0.8</span><br></pre></td></tr></table></figure></li><li><p><strong>命令解析</strong></p><ul><li><p><code>detect.py</code>:  python运行的py文件名称</p></li><li><p><code>--weights</code>： 需要推理的模型文件路径</p></li><li><p><code>--source</code>： 推理所需要的输入图片路径</p></li><li><p><code>--conf-thres:</code> 置信度阈值，建议初始设置为0.8</p></li><li><p><code>--class_dir</code>： 模型推理后输出文件路径<strong>（新增参数）</strong></p></li></ul></li></ol><h3 id="二、detect-py-训练参数解析"><a href="#二、detect-py-训练参数解析" class="headerlink" title="二、detect.py 训练参数解析"></a>二、detect.py 训练参数解析</h3><ol><li><p><strong>控制台常用输入参数解析</strong>：</p><ul><li><code>weights:</code>  模型文件（best.pt）</li><li><code>source:</code>  模型输入的数据，类型支持图片、视频与摄像头（摄像头：0）以及是rtsp等视频流,。</li><li><code>imgsz:</code> 网络输入图片大小, 默认的大小是640</li><li><code>conf-thres:</code> 置信度阈值， 默认为0.25</li><li><code>max-det:</code> 保留的最大检测框数量, 每张图片中检测目标的个数最多为1000类、</li><li><code>device:</code> 设置设备CPU/CUDA, 可以不用设置</li><li><code>save-txt:</code> 是否将预测的框坐标以txt文件形式保存, 默认False, 使用—save-txt 在路径runs/detect/exp<em>/labels/</em>.txt下生成每张图片预测的txt文件</li><li><code>save-conf:</code> 是否将置信度conf也保存到txt中, 默认False</li><li><code>classes:</code> 设置只保留某一部分类别, 形如0或者0 2 3, 使用—classes = n, 则在路径runs/detect/exp*/下保存的图片为n所对应的类别, 此时需要设置data</li></ul></li><li><p><code>detect.py</code> <strong>所有参数说明</strong> </p><ul><li><p><code>weights:</code> 训练的权重路径,可以使用自己训练的权重,也可以使用官网提供的权重 默认官网的权重yolov5s.pt(yolov5n.pt/yolov5s.pt/yolov5m.pt/yolov5l.pt/yolov5x.pt/区别在于网络的宽度和深度以此增加)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ython path/to/detect.py --weights yolov5s.pt                 # PyTorch</span><br><span class="line">                                   yolov5s.torchscript        # TorchScript</span><br><span class="line">                                   yolov5s.onnx               # ONNX Runtime or OpenCV DNN with --dnn</span><br><span class="line">                                   yolov5s.xml                # OpenVINO</span><br><span class="line">                                    yolov5s.engine             # TensorRT</span><br><span class="line">                                    yolov5s.mlmodel            # CoreML (MacOS-only)</span><br><span class="line">                                    yolov5s_saved_model        # TensorFlow SavedModel</span><br><span class="line">                                    yolov5s.pb                 # TensorFlow GraphDef</span><br><span class="line">                                    yolov5s.tflite             # TensorFlow Lite</span><br><span class="line">                                    yolov5s_edgetpu.tflite     # TensorFlow Edge TPU</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p><code>source:</code> 测试数据，可以是图片/视频路径，也可以是’0’(电脑自带摄像头),也可以是rtsp等视频流, 默认data/images</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python path/to/detect.py --weights yolov5s.pt --source 0              # webcam # 直播软件/电脑摄像头</span><br><span class="line">                                                       img.jpg        # image</span><br><span class="line">                                                       vid.mp4        # video</span><br><span class="line">                                                        path/          # directory</span><br><span class="line">                                                       path/*.jpg     # glob</span><br><span class="line">                                                       &#x27;https://youtu.be/Zgi9g1ksQHc&#x27;  # YouTube</span><br><span class="line">                                                        &#x27;rtsp://example.com/media.mp4&#x27;  # RTSP, </span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>data:</code> 配置数据文件路径, 包括image/label/classes等信息, 训练自己的文件, 需要作相应更改, 可以不用管</p><pre><code>如果设置了只显示个别类别即使用了--classes = 0 或二者1, 2, 3等, 则需要设置该文件，数字和类别相对应才能只检测某一个类</code></pre></li><li><p><code>imgsz:</code> 网络输入图片大小, 默认的大小是640</p></li><li><p><code>conf-thres:</code> 置信度阈值， 默认为0.25</p></li><li><p><code>iou-thres:</code>  做nms的iou阈值, 默认为0.45</p></li><li><p><code>max-det:</code> 保留的最大检测框数量, 每张图片中检测目标的个数最多为1000类</p></li><li><p><code>device:</code> 设置设备CPU/CUDA, 可以不用设置</p></li><li><p><code>view-img:</code> 是否展示预测之后的图片/视频, 默认False, —view-img 电脑界面出现图片或者视频检测结果</p></li><li><p><code>save-txt:</code> 是否将预测的框坐标以txt文件形式保存, 默认False, 使用—save-txt 在路径runs/detect/exp<em>/labels/</em>.txt下生成每张图片预测的txt文件</p></li><li><p><code>save-conf:</code> 是否将置信度conf也保存到txt中, 默认False</p></li><li><p><code>save-crop:</code> 是否保存裁剪预测框图片, 默认为False, 使用—save-crop 在runs/detect/exp*/crop/剪切类别文件夹/ 路径下会保存每个接下来的目标</p></li><li><p><code>nosave:</code> 不保存图片、视频, 要保存图片，不设置—nosave 在runs/detect/exp*/会出现预测的结果</p></li><li><p><code>classes:</code> 设置只保留某一部分类别, 形如0或者0 2 3, 使用—classes = n, 则在路径runs/detect/exp*/下保存的图片为n所对应的类别, 此时需要设置data</p></li><li><p><code>agnostic-nms:</code> 进行NMS去除不同类别之间的框, 默认False</p></li><li><p><code>augment:</code> TTA测试时增强/多尺度预测</p></li><li><p><code>visualize:</code> 是否可视化网络层输出特征</p></li><li><p><code>update:</code> 如果为True,则对所有模型进行strip_optimizer操作,去除pt文件中的优化器等信息,默认为False</p></li><li><p><code>project:</code>保存测试日志的文件夹路径</p></li><li><p><code>name:</code>保存测试日志文件夹的名字, 所以最终是保存在project/name中</p></li><li><p><code>exist_ok:</code> 是否重新创建日志文件, False时重新创建文件</p></li><li><p><code>line-thickness:</code> 画框的线条粗细</p></li><li><p><code>hide-labels:</code> 可视化时隐藏预测类别</p></li><li><p><code>hide-conf:</code> 可视化时隐藏置信度</p></li><li><p><code>half:</code> 是否使用F16精度推理, 半进度提高检测速度</p></li><li><p><code>dnn:</code> 用OpenCV DNN预测</p></li><li><p><code>vid-stride:</code>  设置视频帧率  <strong>（新版本参数）</strong></p></li></ul><h3 id="三、detect-py-源码函数解析"><a href="#三、detect-py-源码函数解析" class="headerlink" title="三、detect.py 源码函数解析"></a>三、detect.py 源码函数解析</h3><ol><li><p>detect.py 代码解析<a href="https://github.com/ultralytics/yolov5/blob/master/detect.py">github项目地址</a>，参考<a href="https://blog.csdn.net/CharmsLUO/article/details/123422822?spm=1001.2014.3001.5506">代码注释参考</a> <a href="https://blog.csdn.net/CharmsLUO">Charms@</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Run inference on images, videos, directories, streams, etc.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"></span><br><span class="line">FILE = Path(__file__).resolve()</span><br><span class="line">ROOT = FILE.parents[<span class="number">0</span>]  <span class="comment"># YOLOv5 root directory</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>(ROOT) <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">    sys.path.append(<span class="built_in">str</span>(ROOT))  <span class="comment"># add ROOT to PATH</span></span><br><span class="line">ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  <span class="comment"># relative</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models.common <span class="keyword">import</span> DetectMultiBackend</span><br><span class="line"><span class="keyword">from</span> utils.datasets <span class="keyword">import</span> IMG_FORMATS, VID_FORMATS, LoadImages, LoadStreams</span><br><span class="line"><span class="keyword">from</span> utils.general <span class="keyword">import</span> (LOGGER, check_file, check_img_size, check_imshow, check_requirements, colorstr,</span><br><span class="line">                           increment_path, non_max_suppression, print_args, scale_coords, strip_optimizer, xyxy2xywh)</span><br><span class="line"><span class="keyword">from</span> utils.plots <span class="keyword">import</span> Annotator, colors, save_one_box</span><br><span class="line"><span class="keyword">from</span> utils.torch_utils <span class="keyword">import</span> select_device, time_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测不更新梯度</span></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">weights=ROOT / <span class="string">&#x27;yolov5s.pt&#x27;</span>,  <span class="comment"># model.pt path(s) # 权重文件地址 默认 weights/可以是自己的路径</span></span></span><br><span class="line"><span class="params">        source=ROOT / <span class="string">&#x27;data/images&#x27;</span>,  <span class="comment"># file/dir/URL/glob, 0 for webcam 0 自带电脑摄像头， 默认data/images/</span></span></span><br><span class="line"><span class="params">        data=ROOT / <span class="string">&#x27;data/coco128.yaml&#x27;</span>,  <span class="comment"># dataset.yaml path, data文件路径，包括类别/图片/标签等信息</span></span></span><br><span class="line"><span class="params">        imgsz=(<span class="params"><span class="number">640</span>, <span class="number">640</span></span>),  <span class="comment"># inference size (height, width) 输入图片的大小 默认640*640</span></span></span><br><span class="line"><span class="params">        conf_thres=<span class="number">0.25</span>,  <span class="comment"># confidence threshold # object置信度阈值 默认0.25  用在nms中</span></span></span><br><span class="line"><span class="params">        iou_thres=<span class="number">0.45</span>,  <span class="comment"># NMS IOU threshold # 做nms的iou阈值 默认0.45   用在nms中</span></span></span><br><span class="line"><span class="params">        max_det=<span class="number">1000</span>,  <span class="comment"># maximum detections per image 每张图片最多的目标数量  用在nms中 </span></span></span><br><span class="line"><span class="params">        device=<span class="string">&#x27;&#x27;</span>,  <span class="comment"># cuda device, i.e. 0 or 0,1,2,3 or cpu 设置代码执行的设备 cuda device, i.e. 0 or 0,1,2,3 or cpu</span></span></span><br><span class="line"><span class="params">        view_img=<span class="literal">False</span>,  <span class="comment"># show results 是否展示预测之后的图片或视频 默认False </span></span></span><br><span class="line"><span class="params">        save_txt=<span class="literal">False</span>,  <span class="comment"># save results to *.txt 是否将预测的框坐标以txt文件形式保存, 默认False, 使用--save-txt 在路径runs/detect/exp*/labels/*.txt下生成每张图片预测的txt文件</span></span></span><br><span class="line"><span class="params">        save_conf=<span class="literal">False</span>,  <span class="comment"># save confidences in --save-txt labels 是否将置信度conf也保存到txt中, 默认False</span></span></span><br><span class="line"><span class="params">        save_crop=<span class="literal">False</span>,  <span class="comment"># save cropped prediction boxes 是否保存裁剪预测框图片, 默认为False, 使用--save-crop 在runs/detect/exp*/crop/剪切类别文件夹/ 路径下会保存每个接下来的目标</span></span></span><br><span class="line"><span class="params">        nosave=<span class="literal">False</span>,  <span class="comment"># do not save images/videos 不保存图片、视频, 要保存图片，不设置--nosave 在runs/detect/exp*/会出现预测的结果</span></span></span><br><span class="line"><span class="params">        classes=<span class="literal">None</span>,  <span class="comment"># filter by class: --class 0, or --class 0 2 3 设置只保留某一部分类别, 形如0或者0 2 3, 使用--classes = n, 则在路径runs/detect/exp*/下保存的图片为n所对应的类别, 此时需要设置data</span></span></span><br><span class="line"><span class="params">        agnostic_nms=<span class="literal">False</span>,  <span class="comment"># class-agnostic NMS 进行NMS去除不同类别之间的框, 默认False</span></span></span><br><span class="line"><span class="params">        augment=<span class="literal">False</span>,  <span class="comment"># augmented inference TTA测试时增强/多尺度预测，可以提分</span></span></span><br><span class="line"><span class="params">        visualize=<span class="literal">False</span>,  <span class="comment"># visualize features 是否可视化网络层输出特征</span></span></span><br><span class="line"><span class="params">        update=<span class="literal">False</span>,  <span class="comment"># update all models 如果为True,则对所有模型进行strip_optimizer操作,去除pt文件中的优化器等信息,默认为False</span></span></span><br><span class="line"><span class="params">        project=ROOT / <span class="string">&#x27;runs/detect&#x27;</span>,  <span class="comment"># save results to project/name 保存测试日志的文件夹路径</span></span></span><br><span class="line"><span class="params">        name=<span class="string">&#x27;exp&#x27;</span>,  <span class="comment"># save results to project/name 每次实验的名称</span></span></span><br><span class="line"><span class="params">        exist_ok=<span class="literal">False</span>,  <span class="comment"># existing project/name ok, do not increment 是否重新创建日志文件, False时重新创建文件</span></span></span><br><span class="line"><span class="params">        line_thickness=<span class="number">3</span>,  <span class="comment"># bounding box thickness (pixels) 画框的线条粗细</span></span></span><br><span class="line"><span class="params">        hide_labels=<span class="literal">False</span>,  <span class="comment"># hide labels 可视化时隐藏预测类别</span></span></span><br><span class="line"><span class="params">        hide_conf=<span class="literal">False</span>,  <span class="comment"># hide confidences 可视化时隐藏置信度</span></span></span><br><span class="line"><span class="params">        half=<span class="literal">False</span>,  <span class="comment"># use FP16 half-precision inference 是否使用F16精度推理, 半进度提高检测速度</span></span></span><br><span class="line"><span class="params">        dnn=<span class="literal">False</span>,  <span class="comment"># use OpenCV DNN for ONNX inference 用OpenCV DNN预测</span></span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line">    <span class="comment">################################################# 1. 初始化配置 #####################################################</span></span><br><span class="line">    <span class="comment"># 输入的路径变为字符串</span></span><br><span class="line">    source = <span class="built_in">str</span>(source)</span><br><span class="line">    <span class="comment"># 是否保存图片和txt文件</span></span><br><span class="line">    save_img = <span class="keyword">not</span> nosave <span class="keyword">and</span> <span class="keyword">not</span> source.endswith(<span class="string">&#x27;.txt&#x27;</span>)  <span class="comment"># save inference images</span></span><br><span class="line">    <span class="comment"># 判断文件是否是视频流</span></span><br><span class="line">    <span class="comment"># Path()提取文件名 例如：Path(&quot;./data/test_images/bus.jpg&quot;) Path.name-&gt;bus.jpg Path.parent-&gt;./data/test_images Path.suffix-&gt;.jpg</span></span><br><span class="line">    is_file = Path(source).suffix[<span class="number">1</span>:] <span class="keyword">in</span> (IMG_FORMATS + VID_FORMATS) <span class="comment"># 提取文件后缀名是否符合要求的文件，例如：是否格式是jpg, png, asf, avi等</span></span><br><span class="line">    <span class="comment"># .lower()转化成小写 .upper()转化成大写 .title()首字符转化成大写，其余为小写, .startswith(&#x27;http://&#x27;)返回True or Flase</span></span><br><span class="line">    is_url = source.lower().startswith((<span class="string">&#x27;rtsp://&#x27;</span>, <span class="string">&#x27;rtmp://&#x27;</span>, <span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;https://&#x27;</span>))</span><br><span class="line">    <span class="comment"># .isnumeric()是否是由数字组成，返回True or False</span></span><br><span class="line">    webcam = source.isnumeric() <span class="keyword">or</span> source.endswith(<span class="string">&#x27;.txt&#x27;</span>) <span class="keyword">or</span> (is_url <span class="keyword">and</span> <span class="keyword">not</span> is_file)</span><br><span class="line">    <span class="keyword">if</span> is_url <span class="keyword">and</span> is_file:</span><br><span class="line">        <span class="comment"># 返回文件</span></span><br><span class="line">        source = check_file(source)  <span class="comment"># download</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Directories</span></span><br><span class="line">    <span class="comment"># 预测路径是否存在，不存在新建，按照实验文件以此递增新建</span></span><br><span class="line">    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  <span class="comment"># increment run</span></span><br><span class="line">    (save_dir / <span class="string">&#x27;labels&#x27;</span> <span class="keyword">if</span> save_txt <span class="keyword">else</span> save_dir).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)  <span class="comment"># make dir</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load model</span></span><br><span class="line">    <span class="comment"># 获取设备 CPU/CUDA</span></span><br><span class="line">    device = select_device(device)</span><br><span class="line">    <span class="comment"># 检测编译框架PYTORCH/TENSORFLOW/TENSORRT</span></span><br><span class="line">    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data)</span><br><span class="line">    stride, names, pt, jit, onnx, engine = model.stride, model.names, model.pt, model.jit, model.onnx, model.engine</span><br><span class="line">    <span class="comment"># 确保输入图片的尺寸imgsz能整除stride=32 如果不能则调整为能被整除并返回</span></span><br><span class="line">    imgsz = check_img_size(imgsz, s=stride)  <span class="comment"># check image size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Half</span></span><br><span class="line">    <span class="comment"># 如果不是CPU，使用半进度(图片半精度/模型半精度)</span></span><br><span class="line">    half &amp;= (pt <span class="keyword">or</span> jit <span class="keyword">or</span> onnx <span class="keyword">or</span> engine) <span class="keyword">and</span> device.<span class="built_in">type</span> != <span class="string">&#x27;cpu&#x27;</span>  <span class="comment"># FP16 supported on limited backends with CUDA</span></span><br><span class="line">    <span class="keyword">if</span> pt <span class="keyword">or</span> jit:</span><br><span class="line">        model.model.half() <span class="keyword">if</span> half <span class="keyword">else</span> model.model.<span class="built_in">float</span>()</span><br><span class="line">    <span class="comment"># TENSORRT加速</span></span><br><span class="line">    <span class="keyword">elif</span> engine <span class="keyword">and</span> model.trt_fp16_input != half:</span><br><span class="line">        LOGGER.info(<span class="string">&#x27;model &#x27;</span> + (</span><br><span class="line">            <span class="string">&#x27;requires&#x27;</span> <span class="keyword">if</span> model.trt_fp16_input <span class="keyword">else</span> <span class="string">&#x27;incompatible with&#x27;</span>) + <span class="string">&#x27; --half. Adjusting automatically.&#x27;</span>)</span><br><span class="line">        half = model.trt_fp16_input</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">################################################# 2. 加载数据 #####################################################</span></span><br><span class="line">    <span class="comment"># Dataloader 加载数据</span></span><br><span class="line">    <span class="comment"># 使用视频流或者页面</span></span><br><span class="line">    <span class="keyword">if</span> webcam:</span><br><span class="line">        view_img = check_imshow()</span><br><span class="line">        cudnn.benchmark = <span class="literal">True</span>  <span class="comment"># set True to speed up constant image size inference</span></span><br><span class="line">        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt)</span><br><span class="line">        bs = <span class="built_in">len</span>(dataset)  <span class="comment"># batch_size</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 直接从source文件下读取图片</span></span><br><span class="line">        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt)</span><br><span class="line">        bs = <span class="number">1</span>  <span class="comment"># batch_size</span></span><br><span class="line">    <span class="comment"># 保存的路径</span></span><br><span class="line">    vid_path, vid_writer = [<span class="literal">None</span>] * bs, [<span class="literal">None</span>] * bs</span><br><span class="line"></span><br><span class="line">    <span class="comment">################################################# 3. 网络预测 #####################################################</span></span><br><span class="line">    <span class="comment"># Run inference</span></span><br><span class="line">    <span class="comment"># warmup 热身</span></span><br><span class="line">    model.warmup(imgsz=(<span class="number">1</span> <span class="keyword">if</span> pt <span class="keyword">else</span> bs, <span class="number">3</span>, *imgsz), half=half)  <span class="comment"># warmup</span></span><br><span class="line">    dt, seen = [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> path, im, im0s, vid_cap, s <span class="keyword">in</span> dataset:</span><br><span class="line">        t1 = time_sync()</span><br><span class="line">        <span class="comment"># 转化到GPU上</span></span><br><span class="line">        im = torch.from_numpy(im).to(device)</span><br><span class="line">        <span class="comment"># 是否使用半精度</span></span><br><span class="line">        im = im.half() <span class="keyword">if</span> half <span class="keyword">else</span> im.<span class="built_in">float</span>()  <span class="comment"># uint8 to fp16/32</span></span><br><span class="line">        im /= <span class="number">255</span>  <span class="comment"># 0 - 255 to 0.0 - 1.0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(im.shape) == <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># 增加一个维度</span></span><br><span class="line">            im = im[<span class="literal">None</span>]  <span class="comment"># expand for batch dim</span></span><br><span class="line">        t2 = time_sync()</span><br><span class="line">        dt[<span class="number">0</span>] += t2 - t1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Inference</span></span><br><span class="line">        <span class="comment"># 可是化文件路径</span></span><br><span class="line">        visualize = increment_path(save_dir / Path(path).stem, mkdir=<span class="literal">True</span>) <span class="keyword">if</span> visualize <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        pred.shape=(1, num_boxes, 5+num_class)</span></span><br><span class="line"><span class="string">        h,w为传入网络图片的长和宽,注意dataset在检测时使用了矩形推理,所以这里h不一定等于w</span></span><br><span class="line"><span class="string">        num_boxes = h/32 * w/32 + h/16 * w/16 + h/8 * w/8</span></span><br><span class="line"><span class="string">        pred[..., 0:4]为预测框坐标=预测框坐标为xywh(中心点+宽长)格式</span></span><br><span class="line"><span class="string">        pred[..., 4]为objectness置信度</span></span><br><span class="line"><span class="string">        pred[..., 5:-1]为分类结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pred = model(im, augment=augment, visualize=visualize)</span><br><span class="line">        t3 = time_sync()</span><br><span class="line">        <span class="comment"># 预测的时间</span></span><br><span class="line">        dt[<span class="number">1</span>] += t3 - t2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NMS</span></span><br><span class="line">        <span class="comment"># 非极大值抑制</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        pred: 网络的输出结果</span></span><br><span class="line"><span class="string">        conf_thres:置信度阈值</span></span><br><span class="line"><span class="string">        ou_thres:iou阈值</span></span><br><span class="line"><span class="string">        classes: 是否只保留特定的类别</span></span><br><span class="line"><span class="string">        agnostic_nms: 进行nms是否也去除不同类别之间的框</span></span><br><span class="line"><span class="string">        max-det: 保留的最大检测框数量</span></span><br><span class="line"><span class="string">        ---NMS, 预测框格式: xywh(中心点+长宽)--&gt;xyxy(左上角右下角)</span></span><br><span class="line"><span class="string">        pred是一个列表list[torch.tensor], 长度为batch_size</span></span><br><span class="line"><span class="string">        每一个torch.tensor的shape为(num_boxes, 6), 内容为box + conf + cls</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)</span><br><span class="line">        <span class="comment"># 预测+NMS的时间</span></span><br><span class="line">        dt[<span class="number">2</span>] += time_sync() - t3</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Second-stage classifier (optional)</span></span><br><span class="line">        <span class="comment"># pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Process predictions</span></span><br><span class="line">        <span class="comment"># 对每张图片做处理</span></span><br><span class="line">        <span class="keyword">for</span> i, det <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred):  <span class="comment"># per image</span></span><br><span class="line">            seen += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> webcam:  <span class="comment"># batch_size &gt;= 1</span></span><br><span class="line">                <span class="comment"># 如果输入源是webcam则batch_size&gt;=1 取出dataset中的一张图片</span></span><br><span class="line">                p, im0, frame = path[i], im0s[i].copy(), dataset.count</span><br><span class="line">                s += <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>: &#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 但是大部分我们一般都是从LoadImages流读取本都文件中的照片或者视频 所以batch_size=1</span></span><br><span class="line">                <span class="comment"># p: 当前图片/视频的绝对路径 如 F:\yolo_v5\yolov5-U\data\images\bus.jpg</span></span><br><span class="line">                <span class="comment"># s: 输出信息 初始为 &#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># im0: 原始图片 letterbox + pad 之前的图片</span></span><br><span class="line">                <span class="comment"># frame: 视频流</span></span><br><span class="line">                p, im0, frame = path, im0s.copy(), <span class="built_in">getattr</span>(dataset, <span class="string">&#x27;frame&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前路径yolov5/data/images/</span></span><br><span class="line">            p = Path(p)  <span class="comment"># to Path</span></span><br><span class="line">            <span class="comment"># 图片/视频的保存路径save_path 如 runs\\detect\\exp8\\bus.jpg</span></span><br><span class="line">            save_path = <span class="built_in">str</span>(save_dir / p.name)  <span class="comment"># im.jpg</span></span><br><span class="line">            <span class="comment"># 设置保存框坐标的txt文件路径，每张图片对应一个框坐标信息</span></span><br><span class="line">            txt_path = <span class="built_in">str</span>(save_dir / <span class="string">&#x27;labels&#x27;</span> / p.stem) + (<span class="string">&#x27;&#x27;</span> <span class="keyword">if</span> dataset.mode == <span class="string">&#x27;image&#x27;</span> <span class="keyword">else</span> <span class="string">f&#x27;_<span class="subst">&#123;frame&#125;</span>&#x27;</span>)  <span class="comment"># im.txt</span></span><br><span class="line">            <span class="comment"># 设置打印图片的信息</span></span><br><span class="line">            s += <span class="string">&#x27;%gx%g &#x27;</span> % im.shape[<span class="number">2</span>:]  <span class="comment"># print string</span></span><br><span class="line">            gn = torch.tensor(im0.shape)[[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]  <span class="comment"># normalization gain whwh</span></span><br><span class="line">            <span class="comment"># 保存截图</span></span><br><span class="line">            imc = im0.copy() <span class="keyword">if</span> save_crop <span class="keyword">else</span> im0  <span class="comment"># for save_crop</span></span><br><span class="line">            annotator = Annotator(im0, line_width=line_thickness, example=<span class="built_in">str</span>(names))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(det):</span><br><span class="line">                <span class="comment"># Rescale boxes from img_size to im0 size</span></span><br><span class="line">                <span class="comment"># 将预测信息映射到原图</span></span><br><span class="line">                det[:, :<span class="number">4</span>] = scale_coords(im.shape[<span class="number">2</span>:], det[:, :<span class="number">4</span>], im0.shape).<span class="built_in">round</span>()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Print results</span></span><br><span class="line">                <span class="comment"># 打印检测到的类别数量</span></span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> det[:, -<span class="number">1</span>].unique():</span><br><span class="line">                    n = (det[:, -<span class="number">1</span>] == c).<span class="built_in">sum</span>()  <span class="comment"># detections per class</span></span><br><span class="line">                    s += <span class="string">f&quot;<span class="subst">&#123;n&#125;</span> <span class="subst">&#123;names[<span class="built_in">int</span>(c)]&#125;</span><span class="subst">&#123;<span class="string">&#x27;s&#x27;</span> * (n &gt; <span class="number">1</span>)&#125;</span>, &quot;</span>  <span class="comment"># add to string</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Write results</span></span><br><span class="line">                <span class="comment"># 保存结果： txt/图片画框/crop-image</span></span><br><span class="line">                <span class="keyword">for</span> *xyxy, conf, cls <span class="keyword">in</span> <span class="built_in">reversed</span>(det):</span><br><span class="line">                    <span class="comment"># 将每个图片的预测信息分别存入save_dir/labels下的xxx.txt中 每行: class_id + score + xywh</span></span><br><span class="line">                    <span class="keyword">if</span> save_txt:  <span class="comment"># Write to file</span></span><br><span class="line">                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(<span class="number">1</span>, <span class="number">4</span>)) / gn).view(-<span class="number">1</span>).tolist()  <span class="comment"># normalized xywh</span></span><br><span class="line">                        line = (cls, *xywh, conf) <span class="keyword">if</span> save_conf <span class="keyword">else</span> (cls, *xywh)  <span class="comment"># label format</span></span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(txt_path + <span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            f.write((<span class="string">&#x27;%g &#x27;</span> * <span class="built_in">len</span>(line)).rstrip() % line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    <span class="comment"># # 在原图上画框 + 将预测到的目标剪切出来 保存成图片 保存在save_dir/crops下 在原图像画图或者保存结果</span></span><br><span class="line">                    <span class="keyword">if</span> save_img <span class="keyword">or</span> save_crop <span class="keyword">or</span> view_img:  <span class="comment"># Add bbox to image</span></span><br><span class="line">                        c = <span class="built_in">int</span>(cls)  <span class="comment"># integer class</span></span><br><span class="line">                        label = <span class="literal">None</span> <span class="keyword">if</span> hide_labels <span class="keyword">else</span> (names[c] <span class="keyword">if</span> hide_conf <span class="keyword">else</span> <span class="string">f&#x27;<span class="subst">&#123;names[c]&#125;</span> <span class="subst">&#123;conf:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                        annotator.box_label(xyxy, label, color=colors(c, <span class="literal">True</span>))</span><br><span class="line">                        <span class="keyword">if</span> save_crop:</span><br><span class="line">                            <span class="comment"># 在原图上画框 + 将预测到的目标剪切出来 保存成图片 保存在save_dir/crops下</span></span><br><span class="line">                            save_one_box(xyxy, imc, file=save_dir / <span class="string">&#x27;crops&#x27;</span> / names[c] / <span class="string">f&#x27;<span class="subst">&#123;p.stem&#125;</span>.jpg&#x27;</span>, BGR=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Stream results</span></span><br><span class="line">            im0 = annotator.result()</span><br><span class="line">            <span class="comment"># 显示图片</span></span><br><span class="line">            <span class="keyword">if</span> view_img:</span><br><span class="line">                cv2.imshow(<span class="built_in">str</span>(p), im0)</span><br><span class="line">                cv2.waitKey(<span class="number">1</span>)  <span class="comment"># 1 millisecond</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Save results (image with detections)</span></span><br><span class="line">            <span class="comment"># 保存图片</span></span><br><span class="line">            <span class="keyword">if</span> save_img:</span><br><span class="line">                <span class="keyword">if</span> dataset.mode == <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">                    cv2.imwrite(save_path, im0)</span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># &#x27;video&#x27; or &#x27;stream&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> vid_path[i] != save_path:  <span class="comment"># new video</span></span><br><span class="line">                        vid_path[i] = save_path</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">isinstance</span>(vid_writer[i], cv2.VideoWriter):</span><br><span class="line">                            vid_writer[i].release()  <span class="comment"># release previous video writer</span></span><br><span class="line">                        <span class="keyword">if</span> vid_cap:  <span class="comment"># video</span></span><br><span class="line">                            fps = vid_cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">                            w = <span class="built_in">int</span>(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">                            h = <span class="built_in">int</span>(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">                        <span class="keyword">else</span>:  <span class="comment"># stream</span></span><br><span class="line">                            fps, w, h = <span class="number">30</span>, im0.shape[<span class="number">1</span>], im0.shape[<span class="number">0</span>]</span><br><span class="line">                        save_path = <span class="built_in">str</span>(Path(save_path).with_suffix(<span class="string">&#x27;.mp4&#x27;</span>))  <span class="comment"># force *.mp4 suffix on results videos</span></span><br><span class="line">                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>), fps, (w, h))</span><br><span class="line">                    vid_writer[i].write(im0)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Print time (inference-only)</span></span><br><span class="line">        LOGGER.info(<span class="string">f&#x27;<span class="subst">&#123;s&#125;</span>Done. (<span class="subst">&#123;t3 - t2:<span class="number">.3</span>f&#125;</span>s)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Print results</span></span><br><span class="line">    <span class="comment"># 打印每张图片的速度</span></span><br><span class="line">    t = <span class="built_in">tuple</span>(x / seen * <span class="number">1E3</span> <span class="keyword">for</span> x <span class="keyword">in</span> dt)  <span class="comment"># speeds per image</span></span><br><span class="line">    LOGGER.info(<span class="string">f&#x27;Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape <span class="subst">&#123;(<span class="number">1</span>, <span class="number">3</span>, *imgsz)&#125;</span>&#x27;</span> % t)</span><br><span class="line">    <span class="comment"># 保存图片或者txt</span></span><br><span class="line">    <span class="keyword">if</span> save_txt <span class="keyword">or</span> save_img:</span><br><span class="line">        s = <span class="string">f&quot;\n<span class="subst">&#123;<span class="built_in">len</span>(<span class="built_in">list</span>(save_dir.glob(<span class="string">&#x27;labels/*.txt&#x27;</span>)))&#125;</span> labels saved to <span class="subst">&#123;save_dir / <span class="string">&#x27;labels&#x27;</span>&#125;</span>&quot;</span> <span class="keyword">if</span> save_txt <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        LOGGER.info(<span class="string">f&quot;Results saved to <span class="subst">&#123;colorstr(<span class="string">&#x27;bold&#x27;</span>, save_dir)&#125;</span><span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> update:</span><br><span class="line">        strip_optimizer(weights)  <span class="comment"># update model (to fix SourceChangeWarning)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_opt</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    weights: 训练的权重路径,可以使用自己训练的权重,也可以使用官网提供的权重</span></span><br><span class="line"><span class="string">    默认官网的权重yolov5s.pt(yolov5n.pt/yolov5s.pt/yolov5m.pt/yolov5l.pt/yolov5x.pt/区别在于网络的宽度和深度以此增加)</span></span><br><span class="line"><span class="string">    source: 测试数据，可以是图片/视频路径，也可以是&#x27;0&#x27;(电脑自带摄像头),也可以是rtsp等视频流, 默认data/images</span></span><br><span class="line"><span class="string">    data: 配置数据文件路径, 包括image/label/classes等信息, 训练自己的文件, 需要作相应更改, 可以不用管</span></span><br><span class="line"><span class="string">    如果设置了只显示个别类别即使用了--classes = 0 或二者1, 2, 3等, 则需要设置该文件，数字和类别相对应才能只检测某一个类</span></span><br><span class="line"><span class="string">    imgsz: 网络输入图片大小, 默认的大小是640</span></span><br><span class="line"><span class="string">    conf-thres: 置信度阈值， 默认为0.25</span></span><br><span class="line"><span class="string">    iou-thres:  做nms的iou阈值, 默认为0.45</span></span><br><span class="line"><span class="string">    max-det: 保留的最大检测框数量, 每张图片中检测目标的个数最多为1000类</span></span><br><span class="line"><span class="string">    device: 设置设备CPU/CUDA, 可以不用设置</span></span><br><span class="line"><span class="string">    view-img: 是否展示预测之后的图片/视频, 默认False, --view-img 电脑界面出现图片或者视频检测结果</span></span><br><span class="line"><span class="string">    save-txt: 是否将预测的框坐标以txt文件形式保存, 默认False, 使用--save-txt 在路径runs/detect/exp*/labels/*.txt下生成每张图片预测的txt文件</span></span><br><span class="line"><span class="string">    save-conf: 是否将置信度conf也保存到txt中, 默认False</span></span><br><span class="line"><span class="string">    save-crop: 是否保存裁剪预测框图片, 默认为False, 使用--save-crop 在runs/detect/exp*/crop/剪切类别文件夹/ 路径下会保存每个接下来的目标</span></span><br><span class="line"><span class="string">    nosave: 不保存图片、视频, 要保存图片，不设置--nosave 在runs/detect/exp*/会出现预测的结果</span></span><br><span class="line"><span class="string">    classes: 设置只保留某一部分类别, 形如0或者0 2 3, 使用--classes = n, 则在路径runs/detect/exp*/下保存的图片为n所对应的类别, 此时需要设置data</span></span><br><span class="line"><span class="string">    agnostic-nms: 进行NMS去除不同类别之间的框, 默认False</span></span><br><span class="line"><span class="string">    augment: TTA测试时增强/多尺度预测, 可以提分</span></span><br><span class="line"><span class="string">    visualize: 是否可视化网络层输出特征</span></span><br><span class="line"><span class="string">    update: 如果为True,则对所有模型进行strip_optimizer操作,去除pt文件中的优化器等信息,默认为False</span></span><br><span class="line"><span class="string">    project: 保存测试日志的文件夹路径</span></span><br><span class="line"><span class="string">    name: 保存测试日志文件夹的名字, 所以最终是保存在project/name中</span></span><br><span class="line"><span class="string">    exist_ok: 是否重新创建日志文件, False时重新创建文件</span></span><br><span class="line"><span class="string">    line-thickness: 画框的线条粗细</span></span><br><span class="line"><span class="string">    hide-labels: 可视化时隐藏预测类别</span></span><br><span class="line"><span class="string">    hide-conf: 可视化时隐藏置信度</span></span><br><span class="line"><span class="string">    half: 是否使用F16精度推理, 半进度提高检测速度</span></span><br><span class="line"><span class="string">    dnn: 用OpenCV DNN预测</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;yolov5s.pt&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;model path(s)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--source&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;data/images&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;file/dir/URL/glob, 0 for webcam&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;data/coco128.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;(optional) dataset.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--imgsz&#x27;</span>, <span class="string">&#x27;--img&#x27;</span>, <span class="string">&#x27;--img-size&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=[<span class="number">640</span>], <span class="built_in">help</span>=<span class="string">&#x27;inference size h,w&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf-thres&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.25</span>, <span class="built_in">help</span>=<span class="string">&#x27;confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou-thres&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.45</span>, <span class="built_in">help</span>=<span class="string">&#x27;NMS IoU threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--max-det&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1000</span>, <span class="built_in">help</span>=<span class="string">&#x27;maximum detections per image&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--view-img&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;show results&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-txt&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save results to *.txt&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-conf&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save confidences in --save-txt labels&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-crop&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save cropped prediction boxes&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--nosave&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;do not save images/videos&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;filter by class: --classes 0, or --classes 0 2 3&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--agnostic-nms&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;class-agnostic NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--augment&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;augmented inference&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--visualize&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;visualize features&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--update&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;update all models&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--project&#x27;</span>, default=ROOT / <span class="string">&#x27;runs/detect&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save results to project/name&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, default=<span class="string">&#x27;exp&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save results to project/name&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--exist-ok&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;existing project/name ok, do not increment&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--line-thickness&#x27;</span>, default=<span class="number">3</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;bounding box thickness (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--hide-labels&#x27;</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;hide labels&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--hide-conf&#x27;</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;hide confidences&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--half&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use FP16 half-precision inference&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--dnn&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use OpenCV DNN for ONNX inference&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    opt = parser.parse_args()</span><br><span class="line">    <span class="comment"># 扩充维度, 如果是一位就扩充一位</span></span><br><span class="line">    opt.imgsz *= <span class="number">2</span> <span class="keyword">if</span> <span class="built_in">len</span>(opt.imgsz) == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span>  <span class="comment"># expand</span></span><br><span class="line">    <span class="comment"># 输出所有参数</span></span><br><span class="line">    print_args(FILE.stem, opt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> opt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">opt</span>):</span><br><span class="line">    <span class="comment"># 检查环境/打印参数,主要是requrement.txt的包是否安装，用彩色显示设置的参数</span></span><br><span class="line">    check_requirements(exclude=(<span class="string">&#x27;tensorboard&#x27;</span>, <span class="string">&#x27;thop&#x27;</span>))</span><br><span class="line">    <span class="comment"># 执行run()函数</span></span><br><span class="line">    run(**<span class="built_in">vars</span>(opt))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    opt = parse_opt()</span><br><span class="line">    main(opt)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>parse_opt（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_opt</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    weights: 训练的权重路径,可以使用自己训练的权重,也可以使用官网提供的权重</span></span><br><span class="line"><span class="string">    默认官网的权重yolov5s.pt(yolov5n.pt/yolov5s.pt/yolov5m.pt/yolov5l.pt/yolov5x.pt/区别在于网络的宽度和深度以此增加)</span></span><br><span class="line"><span class="string">    source: 测试数据，可以是图片/视频路径，也可以是&#x27;0&#x27;(电脑自带摄像头),也可以是rtsp等视频流, 默认data/images</span></span><br><span class="line"><span class="string">    data: 配置数据文件路径, 包括image/label/classes等信息, 训练自己的文件, 需要作相应更改, 可以不用管</span></span><br><span class="line"><span class="string">    如果设置了只显示个别类别即使用了--classes = 0 或二者1, 2, 3等, 则需要设置该文件，数字和类别相对应才能只检测某一个类</span></span><br><span class="line"><span class="string">    imgsz: 网络输入图片大小, 默认的大小是640</span></span><br><span class="line"><span class="string">    conf-thres: 置信度阈值， 默认为0.25</span></span><br><span class="line"><span class="string">    iou-thres:  做nms的iou阈值, 默认为0.45</span></span><br><span class="line"><span class="string">    max-det: 保留的最大检测框数量, 每张图片中检测目标的个数最多为1000类</span></span><br><span class="line"><span class="string">    device: 设置设备CPU/CUDA, 可以不用设置</span></span><br><span class="line"><span class="string">    view-img: 是否展示预测之后的图片/视频, 默认False, --view-img 电脑界面出现图片或者视频检测结果</span></span><br><span class="line"><span class="string">    save-txt: 是否将预测的框坐标以txt文件形式保存, 默认False, 使用--save-txt 在路径runs/detect/exp*/labels/*.txt下生成每张图片预测的txt文件</span></span><br><span class="line"><span class="string">    save-conf: 是否将置信度conf也保存到txt中, 默认False</span></span><br><span class="line"><span class="string">    save-crop: 是否保存裁剪预测框图片, 默认为False, 使用--save-crop 在runs/detect/exp*/crop/剪切类别文件夹/ 路径下会保存每个接下来的目标</span></span><br><span class="line"><span class="string">    nosave: 不保存图片、视频, 要保存图片，不设置--nosave 在runs/detect/exp*/会出现预测的结果</span></span><br><span class="line"><span class="string">    classes: 设置只保留某一部分类别, 形如0或者0 2 3, 使用--classes = n, 则在路径runs/detect/exp*/下保存的图片为n所对应的类别, 此时需要设置data</span></span><br><span class="line"><span class="string">    agnostic-nms: 进行NMS去除不同类别之间的框, 默认False</span></span><br><span class="line"><span class="string">    augment: TTA测试时增强/多尺度预测</span></span><br><span class="line"><span class="string">    visualize: 是否可视化网络层输出特征</span></span><br><span class="line"><span class="string">    update: 如果为True,则对所有模型进行strip_optimizer操作,去除pt文件中的优化器等信息,默认为False</span></span><br><span class="line"><span class="string">    project:保存测试日志的文件夹路径</span></span><br><span class="line"><span class="string">    name:保存测试日志文件夹的名字, 所以最终是保存在project/name中</span></span><br><span class="line"><span class="string">    exist_ok: 是否重新创建日志文件, False时重新创建文件</span></span><br><span class="line"><span class="string">    line-thickness: 画框的线条粗细</span></span><br><span class="line"><span class="string">    hide-labels: 可视化时隐藏预测类别</span></span><br><span class="line"><span class="string">    hide-conf: 可视化时隐藏置信度</span></span><br><span class="line"><span class="string">    half: 是否使用F16精度推理, 半进度提高检测速度</span></span><br><span class="line"><span class="string">    dnn: 用OpenCV DNN预测</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;yolov5s.pt&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;model path(s)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--source&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;data/images&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;file/dir/URL/glob, 0 for webcam&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=ROOT / <span class="string">&#x27;data/coco128.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;(optional) dataset.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--imgsz&#x27;</span>, <span class="string">&#x27;--img&#x27;</span>, <span class="string">&#x27;--img-size&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=[<span class="number">640</span>], <span class="built_in">help</span>=<span class="string">&#x27;inference size h,w&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--conf-thres&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.25</span>, <span class="built_in">help</span>=<span class="string">&#x27;confidence threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iou-thres&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.45</span>, <span class="built_in">help</span>=<span class="string">&#x27;NMS IoU threshold&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--max-det&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1000</span>, <span class="built_in">help</span>=<span class="string">&#x27;maximum detections per image&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--view-img&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;show results&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-txt&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save results to *.txt&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-conf&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save confidences in --save-txt labels&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-crop&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save cropped prediction boxes&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--nosave&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;do not save images/videos&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--classes&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;filter by class: --classes 0, or --classes 0 2 3&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--agnostic-nms&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;class-agnostic NMS&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--augment&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;augmented inference&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--visualize&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;visualize features&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--update&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;update all models&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--project&#x27;</span>, default=ROOT / <span class="string">&#x27;runs/detect&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save results to project/name&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, default=<span class="string">&#x27;exp&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;save results to project/name&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--exist-ok&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;existing project/name ok, do not increment&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--line-thickness&#x27;</span>, default=<span class="number">3</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;bounding box thickness (pixels)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--hide-labels&#x27;</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;hide labels&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--hide-conf&#x27;</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;hide confidences&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--half&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use FP16 half-precision inference&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--dnn&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;use OpenCV DNN for ONNX inference&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    opt = parser.parse_args()</span><br><span class="line">    <span class="comment"># 扩充维度, 如果是一位就扩充一位</span></span><br><span class="line">    opt.imgsz *= <span class="number">2</span> <span class="keyword">if</span> <span class="built_in">len</span>(opt.imgsz) == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span>  <span class="comment"># expand</span></span><br><span class="line">    <span class="comment"># 输出所有参数</span></span><br><span class="line">    print_args(FILE.stem, opt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> opt</span><br></pre></td></tr></table></figure></li><li><p>main()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">opt</span>):</span><br><span class="line">    <span class="comment"># 检查环境/打印参数,主要是requrement.txt的包是否安装，用彩色显示设置的参数</span></span><br><span class="line">    check_requirements(exclude=(<span class="string">&#x27;tensorboard&#x27;</span>, <span class="string">&#x27;thop&#x27;</span>))</span><br><span class="line">    <span class="comment"># 执行run()函数</span></span><br><span class="line">    run(**<span class="built_in">vars</span>(opt))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>run()</p><ul><li><p>传入参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">weights=ROOT / <span class="string">&#x27;yolov5s.pt&#x27;</span>,  <span class="comment"># model.pt path(s) # 权重文件地址 默认 weights/可以是自己的路径</span></span></span><br><span class="line"><span class="params">        source=ROOT / <span class="string">&#x27;data/images&#x27;</span>,  <span class="comment"># file/dir/URL/glob, 0 for webcam 0 自带电脑摄像头， 默认data/images/</span></span></span><br><span class="line"><span class="params">        data=ROOT / <span class="string">&#x27;data/coco128.yaml&#x27;</span>,  <span class="comment"># dataset.yaml path, data文件路径，包括类别/图片/标签等信息</span></span></span><br><span class="line"><span class="params">        imgsz=(<span class="params"><span class="number">640</span>, <span class="number">640</span></span>),  <span class="comment"># inference size (height, width) 输入图片的大小 默认640*640</span></span></span><br><span class="line"><span class="params">        conf_thres=<span class="number">0.25</span>,  <span class="comment"># confidence threshold # object置信度阈值 默认0.25  用在nms中</span></span></span><br><span class="line"><span class="params">        iou_thres=<span class="number">0.45</span>,  <span class="comment"># NMS IOU threshold # 做nms的iou阈值 默认0.45   用在nms中</span></span></span><br><span class="line"><span class="params">        max_det=<span class="number">1000</span>,  <span class="comment"># maximum detections per image 每张图片最多的目标数量  用在nms中 </span></span></span><br><span class="line"><span class="params">        device=<span class="string">&#x27;&#x27;</span>,  <span class="comment"># cuda device, i.e. 0 or 0,1,2,3 or cpu 设置代码执行的设备 cuda device, i.e. 0 or 0,1,2,3 or cpu</span></span></span><br><span class="line"><span class="params">        view_img=<span class="literal">False</span>,  <span class="comment"># show results 是否展示预测之后的图片或视频 默认False </span></span></span><br><span class="line"><span class="params">        save_txt=<span class="literal">False</span>,  <span class="comment"># save results to *.txt 是否将预测的框坐标以txt文件形式保存, 默认False, 使用--save-txt 在路径runs/detect/exp*/labels/*.txt下生成每张图片预测的txt文件</span></span></span><br><span class="line"><span class="params">        save_conf=<span class="literal">False</span>,  <span class="comment"># save confidences in --save-txt labels 是否将置信度conf也保存到txt中, 默认False</span></span></span><br><span class="line"><span class="params">        save_crop=<span class="literal">False</span>,  <span class="comment"># save cropped prediction boxes 是否保存裁剪预测框图片, 默认为False, 使用--save-crop 在runs/detect/exp*/crop/剪切类别文件夹/ 路径下会保存每个接下来的目标</span></span></span><br><span class="line"><span class="params">        nosave=<span class="literal">False</span>,  <span class="comment"># do not save images/videos 不保存图片、视频, 要保存图片，不设置--nosave 在runs/detect/exp*/会出现预测的结果</span></span></span><br><span class="line"><span class="params">        classes=<span class="literal">None</span>,  <span class="comment"># filter by class: --class 0, or --class 0 2 3 设置只保留某一部分类别, 形如0或者0 2 3, 使用--classes = n, 则在路径runs/detect/exp*/下保存的图片为n所对应的类别, 此时需要设置data</span></span></span><br><span class="line"><span class="params">        agnostic_nms=<span class="literal">False</span>,  <span class="comment"># class-agnostic NMS 进行NMS去除不同类别之间的框, 默认False</span></span></span><br><span class="line"><span class="params">        augment=<span class="literal">False</span>,  <span class="comment"># augmented inference TTA测试时增强/多尺度预测，可以提分</span></span></span><br><span class="line"><span class="params">        visualize=<span class="literal">False</span>,  <span class="comment"># visualize features 是否可视化网络层输出特征</span></span></span><br><span class="line"><span class="params">        update=<span class="literal">False</span>,  <span class="comment"># update all models 如果为True,则对所有模型进行strip_optimizer操作,去除pt文件中的优化器等信息,默认为False</span></span></span><br><span class="line"><span class="params">        project=ROOT / <span class="string">&#x27;runs/detect&#x27;</span>,  <span class="comment"># save results to project/name 保存测试日志的文件夹路径</span></span></span><br><span class="line"><span class="params">        name=<span class="string">&#x27;exp&#x27;</span>,  <span class="comment"># save results to project/name 每次实验的名称</span></span></span><br><span class="line"><span class="params">        exist_ok=<span class="literal">False</span>,  <span class="comment"># existing project/name ok, do not increment 是否重新创建日志文件, False时重新创建文件</span></span></span><br><span class="line"><span class="params">        line_thickness=<span class="number">3</span>,  <span class="comment"># bounding box thickness (pixels) 画框的线条粗细</span></span></span><br><span class="line"><span class="params">        hide_labels=<span class="literal">False</span>,  <span class="comment"># hide labels 可视化时隐藏预测类别</span></span></span><br><span class="line"><span class="params">        hide_conf=<span class="literal">False</span>,  <span class="comment"># hide confidences 可视化时隐藏置信度</span></span></span><br><span class="line"><span class="params">        half=<span class="literal">False</span>,  <span class="comment"># use FP16 half-precision inference 是否使用F16精度推理, 半进度提高检测速度</span></span></span><br><span class="line"><span class="params">        dnn=<span class="literal">False</span>,  <span class="comment"># use OpenCV DNN for ONNX inference 用OpenCV DNN预测</span></span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>初始化配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################# 1. 初始化配置 #####################################################</span></span><br><span class="line">    <span class="comment"># 输入的路径变为字符串</span></span><br><span class="line">    source = <span class="built_in">str</span>(source)</span><br><span class="line">    <span class="comment"># 是否保存图片和txt文件</span></span><br><span class="line">    save_img = <span class="keyword">not</span> nosave <span class="keyword">and</span> <span class="keyword">not</span> source.endswith(<span class="string">&#x27;.txt&#x27;</span>)  <span class="comment"># save inference images</span></span><br><span class="line">    <span class="comment"># 判断文件是否是视频流</span></span><br><span class="line">    <span class="comment"># Path()提取文件名 例如：Path(&quot;./data/test_images/bus.jpg&quot;) Path.name-&gt;bus.jpg Path.parent-&gt;./data/test_images Path.suffix-&gt;.jpg</span></span><br><span class="line">    is_file = Path(source).suffix[<span class="number">1</span>:] <span class="keyword">in</span> (IMG_FORMATS + VID_FORMATS) <span class="comment"># 提取文件后缀名是否符合要求的文件，例如：是否格式是jpg, png, asf, avi等</span></span><br><span class="line">    <span class="comment"># .lower()转化成小写 .upper()转化成大写 .title()首字符转化成大写，其余为小写, .startswith(&#x27;http://&#x27;)返回True or Flase</span></span><br><span class="line">    is_url = source.lower().startswith((<span class="string">&#x27;rtsp://&#x27;</span>, <span class="string">&#x27;rtmp://&#x27;</span>, <span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;https://&#x27;</span>))</span><br><span class="line">    <span class="comment"># .isnumeric()是否是由数字组成，返回True or False</span></span><br><span class="line">    webcam = source.isnumeric() <span class="keyword">or</span> source.endswith(<span class="string">&#x27;.txt&#x27;</span>) <span class="keyword">or</span> (is_url <span class="keyword">and</span> <span class="keyword">not</span> is_file)</span><br><span class="line">    <span class="keyword">if</span> is_url <span class="keyword">and</span> is_file:</span><br><span class="line">        <span class="comment"># 返回文件</span></span><br><span class="line">        source = check_file(source)  <span class="comment"># download</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Directories</span></span><br><span class="line">    <span class="comment"># 预测路径是否存在，不存在新建，按照实验文件以此递增新建</span></span><br><span class="line">    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  <span class="comment"># increment run</span></span><br><span class="line">    (save_dir / <span class="string">&#x27;labels&#x27;</span> <span class="keyword">if</span> save_txt <span class="keyword">else</span> save_dir).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)  <span class="comment"># make dir</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load model</span></span><br><span class="line">    <span class="comment"># 获取设备 CPU/CUDA</span></span><br><span class="line">    device = select_device(device)</span><br><span class="line">    <span class="comment"># 检测编译框架PYTORCH/TENSORFLOW/TENSORRT</span></span><br><span class="line">    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data)</span><br><span class="line">    stride, names, pt, jit, onnx, engine = model.stride, model.names, model.pt, model.jit, model.onnx, model.engine</span><br><span class="line">    <span class="comment"># 确保输入图片的尺寸imgsz能整除stride=32 如果不能则调整为能被整除并返回</span></span><br><span class="line">    imgsz = check_img_size(imgsz, s=stride)  <span class="comment"># check image size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Half</span></span><br><span class="line">    <span class="comment"># 如果不是CPU，使用半进度(图片半精度/模型半精度)</span></span><br><span class="line">    half &amp;= (pt <span class="keyword">or</span> jit <span class="keyword">or</span> onnx <span class="keyword">or</span> engine) <span class="keyword">and</span> device.<span class="built_in">type</span> != <span class="string">&#x27;cpu&#x27;</span>  <span class="comment"># FP16 supported on limited backends with CUDA</span></span><br><span class="line">    <span class="keyword">if</span> pt <span class="keyword">or</span> jit:</span><br><span class="line">        model.model.half() <span class="keyword">if</span> half <span class="keyword">else</span> model.model.<span class="built_in">float</span>()</span><br><span class="line">    <span class="comment"># TENSORRT加速</span></span><br><span class="line">    <span class="keyword">elif</span> engine <span class="keyword">and</span> model.trt_fp16_input != half:</span><br><span class="line">        LOGGER.info(<span class="string">&#x27;model &#x27;</span> + (</span><br><span class="line">            <span class="string">&#x27;requires&#x27;</span> <span class="keyword">if</span> model.trt_fp16_input <span class="keyword">else</span> <span class="string">&#x27;incompatible with&#x27;</span>) + <span class="string">&#x27; --half. Adjusting automatically.&#x27;</span>)</span><br><span class="line">        half = model.trt_fp16_input</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################# 2. 加载数据 #####################################################</span></span><br><span class="line">    <span class="comment"># Dataloader 加载数据</span></span><br><span class="line">    <span class="comment"># 使用视频流或者页面</span></span><br><span class="line">    <span class="keyword">if</span> webcam:</span><br><span class="line">        view_img = check_imshow()</span><br><span class="line">        cudnn.benchmark = <span class="literal">True</span>  <span class="comment"># set True to speed up constant image size inference</span></span><br><span class="line">        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt)</span><br><span class="line">        bs = <span class="built_in">len</span>(dataset)  <span class="comment"># batch_size</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 直接从source文件下读取图片</span></span><br><span class="line">        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt)</span><br><span class="line">        bs = <span class="number">1</span>  <span class="comment"># batch_size</span></span><br><span class="line">    <span class="comment"># 保存的路径</span></span><br><span class="line">    vid_path, vid_writer = [<span class="literal">None</span>] * bs, [<span class="literal">None</span>] * bs</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>输入预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">model.warmup(imgsz=(<span class="number">1</span> <span class="keyword">if</span> pt <span class="keyword">else</span> bs, <span class="number">3</span>, *imgsz), half=half)  <span class="comment"># warmup</span></span><br><span class="line">   dt, seen = [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> path, im, im0s, vid_cap, s <span class="keyword">in</span> dataset:</span><br><span class="line">       t1 = time_sync()</span><br><span class="line">       <span class="comment"># 转化到GPU上</span></span><br><span class="line">       im = torch.from_numpy(im).to(device)</span><br><span class="line">       <span class="comment"># 是否使用半精度</span></span><br><span class="line">       im = im.half() <span class="keyword">if</span> half <span class="keyword">else</span> im.<span class="built_in">float</span>()  <span class="comment"># uint8 to fp16/32</span></span><br><span class="line">       im /= <span class="number">255</span>  <span class="comment"># 0 - 255 to 0.0 - 1.0</span></span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">len</span>(im.shape) == <span class="number">3</span>:</span><br><span class="line">           <span class="comment"># 增加一个维度</span></span><br><span class="line">           im = im[<span class="literal">None</span>]  <span class="comment"># expand for batch dim</span></span><br><span class="line">       t2 = time_sync()</span><br><span class="line">       dt[<span class="number">0</span>] += t2 - t1</span><br><span class="line">     </span><br><span class="line">       <span class="comment"># Inference</span></span><br><span class="line">       <span class="comment"># 可是化文件路径</span></span><br><span class="line">       visualize = increment_path(save_dir / Path(path).stem, mkdir=<span class="literal">True</span>) <span class="keyword">if</span> visualize <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       pred.shape=(1, num_boxes, 5+num_class)</span></span><br><span class="line"><span class="string">       h,w为传入网络图片的长和宽,注意dataset在检测时使用了矩形推理,所以这里h不一定等于w</span></span><br><span class="line"><span class="string">       num_boxes = h/32 * w/32 + h/16 * w/16 + h/8 * w/8</span></span><br><span class="line"><span class="string">       pred[..., 0:4]为预测框坐标=预测框坐标为xywh(中心点+宽长)格式</span></span><br><span class="line"><span class="string">       pred[..., 4]为objectness置信度</span></span><br><span class="line"><span class="string">       pred[..., 5:-1]为分类结果</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       pred = model(im, augment=augment, visualize=visualize)</span><br><span class="line">       t3 = time_sync()</span><br><span class="line">       <span class="comment"># 预测的时间</span></span><br><span class="line">       dt[<span class="number">1</span>] += t3 - t2</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li><li><p>NMS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NMS</span></span><br><span class="line">      <span class="comment"># 非极大值抑制</span></span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      pred: 网络的输出结果</span></span><br><span class="line"><span class="string">      conf_thres:置信度阈值</span></span><br><span class="line"><span class="string">      ou_thres:iou阈值</span></span><br><span class="line"><span class="string">      classes: 是否只保留特定的类别</span></span><br><span class="line"><span class="string">      agnostic_nms: 进行nms是否也去除不同类别之间的框</span></span><br><span class="line"><span class="string">      max-det: 保留的最大检测框数量</span></span><br><span class="line"><span class="string">      ---NMS, 预测框格式: xywh(中心点+长宽)--&gt;xyxy(左上角右下角)</span></span><br><span class="line"><span class="string">      pred是一个列表list[torch.tensor], 长度为batch_size</span></span><br><span class="line"><span class="string">      每一个torch.tensor的shape为(num_boxes, 6), 内容为box + conf + cls</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">      pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)</span><br><span class="line">      <span class="comment"># 预测+NMS的时间</span></span><br><span class="line">      dt[<span class="number">2</span>] += time_sync() - t3</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li><li><p>保存打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Process predictions</span></span><br><span class="line">        <span class="comment"># 对每张图片做处理</span></span><br><span class="line">        <span class="keyword">for</span> i, det <span class="keyword">in</span> <span class="built_in">enumerate</span>(pred):  <span class="comment"># per image</span></span><br><span class="line">            seen += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> webcam:  <span class="comment"># batch_size &gt;= 1</span></span><br><span class="line">                <span class="comment"># 如果输入源是webcam则batch_size&gt;=1 取出dataset中的一张图片</span></span><br><span class="line">                p, im0, frame = path[i], im0s[i].copy(), dataset.count</span><br><span class="line">                s += <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>: &#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 但是大部分我们一般都是从LoadImages流读取本都文件中的照片或者视频 所以batch_size=1</span></span><br><span class="line">                <span class="comment"># p: 当前图片/视频的绝对路径 如 F:\yolo_v5\yolov5-U\data\images\bus.jpg</span></span><br><span class="line">                <span class="comment"># s: 输出信息 初始为 &#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># im0: 原始图片 letterbox + pad 之前的图片</span></span><br><span class="line">                <span class="comment"># frame: 视频流</span></span><br><span class="line">                p, im0, frame = path, im0s.copy(), <span class="built_in">getattr</span>(dataset, <span class="string">&#x27;frame&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前路径yolov5/data/images/</span></span><br><span class="line">            p = Path(p)  <span class="comment"># to Path</span></span><br><span class="line">            <span class="comment"># 图片/视频的保存路径save_path 如 runs\\detect\\exp8\\bus.jpg</span></span><br><span class="line">            save_path = <span class="built_in">str</span>(save_dir / p.name)  <span class="comment"># im.jpg</span></span><br><span class="line">            <span class="comment"># 设置保存框坐标的txt文件路径，每张图片对应一个框坐标信息</span></span><br><span class="line">            txt_path = <span class="built_in">str</span>(save_dir / <span class="string">&#x27;labels&#x27;</span> / p.stem) + (<span class="string">&#x27;&#x27;</span> <span class="keyword">if</span> dataset.mode == <span class="string">&#x27;image&#x27;</span> <span class="keyword">else</span> <span class="string">f&#x27;_<span class="subst">&#123;frame&#125;</span>&#x27;</span>)  <span class="comment"># im.txt</span></span><br><span class="line">            <span class="comment"># 设置打印图片的信息</span></span><br><span class="line">            s += <span class="string">&#x27;%gx%g &#x27;</span> % im.shape[<span class="number">2</span>:]  <span class="comment"># print string</span></span><br><span class="line">            gn = torch.tensor(im0.shape)[[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]  <span class="comment"># normalization gain whwh</span></span><br><span class="line">            <span class="comment"># 保存截图</span></span><br><span class="line">            imc = im0.copy() <span class="keyword">if</span> save_crop <span class="keyword">else</span> im0  <span class="comment"># for save_crop</span></span><br><span class="line">            annotator = Annotator(im0, line_width=line_thickness, example=<span class="built_in">str</span>(names))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(det):</span><br><span class="line">                <span class="comment"># Rescale boxes from img_size to im0 size</span></span><br><span class="line">                <span class="comment"># 将预测信息映射到原图</span></span><br><span class="line">                det[:, :<span class="number">4</span>] = scale_coords(im.shape[<span class="number">2</span>:], det[:, :<span class="number">4</span>], im0.shape).<span class="built_in">round</span>()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Print results</span></span><br><span class="line">                <span class="comment"># 打印检测到的类别数量</span></span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> det[:, -<span class="number">1</span>].unique():</span><br><span class="line">                    n = (det[:, -<span class="number">1</span>] == c).<span class="built_in">sum</span>()  <span class="comment"># detections per class</span></span><br><span class="line">                    s += <span class="string">f&quot;<span class="subst">&#123;n&#125;</span> <span class="subst">&#123;names[<span class="built_in">int</span>(c)]&#125;</span><span class="subst">&#123;<span class="string">&#x27;s&#x27;</span> * (n &gt; <span class="number">1</span>)&#125;</span>, &quot;</span>  <span class="comment"># add to string</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Write results</span></span><br><span class="line">                <span class="comment"># 保存结果： txt/图片画框/crop-image</span></span><br><span class="line">                <span class="keyword">for</span> *xyxy, conf, cls <span class="keyword">in</span> <span class="built_in">reversed</span>(det):</span><br><span class="line">                    <span class="comment"># 将每个图片的预测信息分别存入save_dir/labels下的xxx.txt中 每行: class_id + score + xywh</span></span><br><span class="line">                    <span class="keyword">if</span> save_txt:  <span class="comment"># Write to file</span></span><br><span class="line">                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(<span class="number">1</span>, <span class="number">4</span>)) / gn).view(-<span class="number">1</span>).tolist()  <span class="comment"># normalized xywh</span></span><br><span class="line">                        line = (cls, *xywh, conf) <span class="keyword">if</span> save_conf <span class="keyword">else</span> (cls, *xywh)  <span class="comment"># label format</span></span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(txt_path + <span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            f.write((<span class="string">&#x27;%g &#x27;</span> * <span class="built_in">len</span>(line)).rstrip() % line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    <span class="comment"># # 在原图上画框 + 将预测到的目标剪切出来 保存成图片 保存在save_dir/crops下 在原图像画图或者保存结果</span></span><br><span class="line">                    <span class="keyword">if</span> save_img <span class="keyword">or</span> save_crop <span class="keyword">or</span> view_img:  <span class="comment"># Add bbox to image</span></span><br><span class="line">                        c = <span class="built_in">int</span>(cls)  <span class="comment"># integer class</span></span><br><span class="line">                        label = <span class="literal">None</span> <span class="keyword">if</span> hide_labels <span class="keyword">else</span> (names[c] <span class="keyword">if</span> hide_conf <span class="keyword">else</span> <span class="string">f&#x27;<span class="subst">&#123;names[c]&#125;</span> <span class="subst">&#123;conf:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">                        annotator.box_label(xyxy, label, color=colors(c, <span class="literal">True</span>))</span><br><span class="line">                        <span class="keyword">if</span> save_crop:</span><br><span class="line">                            <span class="comment"># 在原图上画框 + 将预测到的目标剪切出来 保存成图片 保存在save_dir/crops下</span></span><br><span class="line">                            save_one_box(xyxy, imc, file=save_dir / <span class="string">&#x27;crops&#x27;</span> / names[c] / <span class="string">f&#x27;<span class="subst">&#123;p.stem&#125;</span>.jpg&#x27;</span>, BGR=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Stream results</span></span><br><span class="line">            im0 = annotator.result()</span><br><span class="line">            <span class="comment"># 显示图片</span></span><br><span class="line">            <span class="keyword">if</span> view_img:</span><br><span class="line">                cv2.imshow(<span class="built_in">str</span>(p), im0)</span><br><span class="line">                cv2.waitKey(<span class="number">1</span>)  <span class="comment"># 1 millisecond</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Save results (image with detections)</span></span><br><span class="line">            <span class="comment"># 保存图片</span></span><br><span class="line">            <span class="keyword">if</span> save_img:</span><br><span class="line">                <span class="keyword">if</span> dataset.mode == <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">                    cv2.imwrite(save_path, im0)</span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># &#x27;video&#x27; or &#x27;stream&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> vid_path[i] != save_path:  <span class="comment"># new video</span></span><br><span class="line">                        vid_path[i] = save_path</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">isinstance</span>(vid_writer[i], cv2.VideoWriter):</span><br><span class="line">                            vid_writer[i].release()  <span class="comment"># release previous video writer</span></span><br><span class="line">                        <span class="keyword">if</span> vid_cap:  <span class="comment"># video</span></span><br><span class="line">                            fps = vid_cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line">                            w = <span class="built_in">int</span>(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">                            h = <span class="built_in">int</span>(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">                        <span class="keyword">else</span>:  <span class="comment"># stream</span></span><br><span class="line">                            fps, w, h = <span class="number">30</span>, im0.shape[<span class="number">1</span>], im0.shape[<span class="number">0</span>]</span><br><span class="line">                        save_path = <span class="built_in">str</span>(Path(save_path).with_suffix(<span class="string">&#x27;.mp4&#x27;</span>))  <span class="comment"># force *.mp4 suffix on results videos</span></span><br><span class="line">                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*<span class="string">&#x27;mp4v&#x27;</span>), fps, (w, h))</span><br><span class="line">                    vid_writer[i].write(im0)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Print time (inference-only)</span></span><br><span class="line">        LOGGER.info(<span class="string">f&#x27;<span class="subst">&#123;s&#125;</span>Done. (<span class="subst">&#123;t3 - t2:<span class="number">.3</span>f&#125;</span>s)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="四、扩展使用方法"><a href="#四、扩展使用方法" class="headerlink" title="四、扩展使用方法"></a>四、扩展使用方法</h3><ol><li><strong>在</strong><code>python</code><strong>文件中运行</strong></li><li><strong>加入项目使用</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YOLO-使用detect-py-推理模型&quot;&gt;&lt;a href=&quot;#YOLO-使用detect-py-推理模型&quot; class=&quot;headerlink&quot; title=&quot;YOLO: 使用detect.py 推理模型&quot;&gt;&lt;/a&gt;YOLO: 使用detect.py 推理模型</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://acgnliu.github.io/posts/0.html"/>
    <id>https://acgnliu.github.io/posts/0.html</id>
    <published>2023-03-15T06:37:04.000Z</published>
    <updated>2023-03-15T06:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/183261974">https://zhuanlan.zhihu.com/p/183261974</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/183261974&quot;&gt;https://zhuanlan.zhihu.com/p/183261974&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://acgnliu.github.io/posts/2f57a694.html"/>
    <id>https://acgnliu.github.io/posts/2f57a694.html</id>
    <published>2022-11-15T14:29:20.000Z</published>
    <updated>2022-11-17T16:19:50.529Z</updated>
    
    <content type="html"><![CDATA[<p><h3> 一. 使用正则表达式查找文本模式<h3></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">regex_str = <span class="string">&quot;1. wubba lubba dub dubs. 2. Hey, what are you in for? - Everyting. 3. Homework is stupid, the whole point is to get less of it.&quot;</span></span><br></pre></td></tr></table></figure><p><h4>1、正则操作步骤<h4></p><ul><li>基础流程如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d&#x27;</span>)        <span class="comment"># 正则表达式</span></span><br><span class="line">result = regex.search(regex_str)    <span class="comment"># 查找</span></span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment"># 返回结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果： 1</span></span><br></pre></td></tr></table></figure></li><li>流程解析 <br><ol><li>导入<code>re</code>模块</li><li>传入正则表达式，返回值为<code>regex</code>对象。</li><li>使用<code>regex</code>对象方法（<code>search</code>）查找匹配正则表达式， 返回<code>Match</code>对象</li><li>使用<code>Match</code>对象的方法（<code>group</code>）获取匹配的值。</li></ol></li><li><strong>知识点 01 字符替换</strong><ol><li><code>\d</code>: 表示一个数字 0~9</li><li><code>\w</code>: 表示一个下划线、数字、或字母</li><li><code>\s</code>: 表示一个空格、制表、换行</li></ol></li></ul><p><h4>2、分组 <h4></p><ul><li>代码演示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;(\d).*(\d).*(\d)&quot;</span>)  <span class="comment"># 分三组</span></span><br><span class="line">result = regex.search(regex_str)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 运行结果：1. wubba lubba dub dubs. Hey, 2. what are you in for? - Everyting. 3</span></span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))  <span class="comment"># 打印匹配到的第一组的值</span></span><br><span class="line"><span class="comment"># 运行结果： 1  </span></span><br><span class="line"><span class="built_in">print</span>(result.groups())  <span class="comment"># 打印匹配到的所有组的值</span></span><br><span class="line"><span class="comment"># 运行结果：(&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;)</span></span><br></pre></td></tr></table></figure><strong>- 知识点 2 括号</strong></li></ul><ol><li>第一个括号内的表达式为第一组，可使用<code>group(1)</code>取值</li><li><code>groups()</code> 获取所有分组。</li></ol><p><h4>3、字符<h4></p><ul><li>代码演示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;(b)&#123;2&#125;&quot;</span>)  <span class="comment"># 分三组</span></span><br><span class="line">result = regex.search(regex_str)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 运行结果： bb</span></span><br><span class="line"><span class="built_in">print</span>(result.groups())</span><br><span class="line"><span class="comment"># 运行结果: (&#x27;b&#x27;,)</span></span><br></pre></td></tr></table></figure><strong>- 知识点 3 贪心匹配</strong></li></ul><ol><li><code>()&#123;N&#125;</code> 表示匹配括号内表达式 N次。</li><li><code>()&#123;1,3&#125;</code> 优先匹配3次</li><li><code>()&#123;1,&#125;</code> 优先配对最大值(<code>max</code>)</li><li><code>()&#123;,2&#125;</code> 优先配对2次，(<em>找不到值则返回为<code>None</code></em>)</li><li><code>()&#123;1,3&#125;?</code> 非贪心匹配</li></ol><p><h4>4、通配符<h4></p><ol><li><code>+</code>： 加号表示匹配一次或多次。</li><li><code>*</code>： 星号表示匹配零次或多次。</li><li><code>?</code>： 问号表示匹配零次或一次。</li><li><code>.</code>:  表示任意一个字符，非换行符之外的所有字符</li><li><code>^a</code>：表示以a开头的字符。</li><li><code>$a</code>: 表示以a结尾的字符。</li><li><code>&#123;N&#125;</code>: 表示匹配次数。</li><li><code>[auc]</code>: 表示单字符选择范围(<code>a u c</code>)</li><li><code>[^auc]</code>:表示单字符选择范围(除<code>a u c</code>外字符)</li></ol><p><h4>5、扩展<h4></p><ul><li><p>代码演示，<code>compile</code> 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;.*&quot;</span>, re.DOTALL) <span class="comment"># 匹配所有字符，包括换行符</span></span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;aAsA&quot;</span>, re.IGNORECASE)    <span class="comment"># 不区分大小写</span></span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;&#x27;&#x27;(wubba).*  # 注释</span></span><br><span class="line"><span class="string">(dub)  # 注释&#x27;&#x27;&#x27;</span>, re.VERBOSE)  </span><br><span class="line">result = regex.search(regex_str)</span><br><span class="line"><span class="comment">#运行结果: wubba lubbba dub dub</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码演示， <code>re</code> 基础方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;(\d)(bb)&quot;</span>)</span><br><span class="line">regex.sub(<span class="string">&quot;www&quot;</span>, <span class="string">&quot;111bbbb, 111&quot;</span>) </span><br><span class="line"><span class="comment">#运行结果: 11wwwbb, 111</span></span><br><span class="line"></span><br><span class="line">regex.sub(<span class="string">&quot;\2***&quot;</span>, <span class="string">&quot;111bbbb, 111&quot;</span>)</span><br><span class="line"><span class="comment">#运行结果: 11***bb, 111</span></span><br><span class="line"></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;\w\d\w&quot;</span>, <span class="string">&quot;111 11111 111&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment">#运行结果: 111</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;h3&gt; 一. 使用正则表达式查找文本模式&lt;h3&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://acgnliu.github.io/posts/518e617c.html"/>
    <id>https://acgnliu.github.io/posts/518e617c.html</id>
    <published>2022-11-14T15:57:00.000Z</published>
    <updated>2022-11-14T16:26:27.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git-学习笔记"><a href="#Git-学习笔记" class="headerlink" title="Git 学习笔记"></a>Git 学习笔记</h3><ol><li><p><code>git</code> 基本介绍 <br></p><ul><li><p>是什么 <br></p><ol><li>一个代码管理的工具。</li><li>可以随时将本地仓库的代码提交至远程仓库</li><li><em>懒得打字</em></li></ol></li><li><p>流程</p><ol><li>下载安装并配置git</li><li>生成密钥对：<em>公钥</em> - <code>id_rsa.pub</code>  <em>私钥</em> - <code>id_rsa</code></li><li>创建远程仓库，上传公钥。</li><li>克隆代码到本地</li><li>提交代码.</li></ol></li></ul></li><li><code>git</code> 下载与安装。 <br><ul><li>指令</li><li><code>git version</code>: 查看版本号</li><li>注： <code>MAC 需要安装一下xcode: xcode-select --install</code></li></ul></li><li><code>git</code> 配置 <br><ul><li><code>git config --list</code>: 查看git当前的config配置</li><li><code>ssh-keygen -t rsa -C “your_email@youremail.com&quot;</code>: 生成密钥对。</li><li><code>git clone git@github.com:Yourcount/GitTest.ogt</code>: 克隆远程仓库。</li></ul></li><li><code>git</code> 日常使用命令。 <br><ul><li><code>git branch</code>: 查看本地分支</li><li><code>git baranch</code>: 查看所有分支。<br> <code>remotes/origin</code>为远程分支。</li><li><code>git branch -av</code>: 查看所有分支与最近的一条提交记录。</li><li><code>git branch -avv</code>: 查看分支，以及关联的仓库</li><li><code>git remote show otigin</code>: 查看远程分支直接的关系</li><li><code>git stauts</code>: 查看本地仓库状态</li><li><code>git diff</code>: 查看改动内容</li><li><code>git add .</code>: 添加</li><li><code>git reset .</code>: 撤销添加</li><li><code>git commit -m &quot;描述&quot;</code>: 提交本次改动</li><li><code>git commit -s</code></li><li><code>git log</code>: 查看提交日志</li><li><code>git push origin Head:main</code>: 提交至远程仓库</li><li><code>git pull - rebase</code>: 下拉仓库</li><li><code>git push</code>: 提交</li><li><code>git checkout -b V2</code>: 创建本地分支，并切换至此分支</li><li><code>git checkout V2</code>: 切换分支</li><li><code>git push origin V2:remote_branch_V2</code>:创建远程分支</li><li><code>git push origin :remote_branch_V2</code>:删除。push空就等于删除</li><li><code>git checkout -b v2 origin/main</code>: 拉取分支并建立关系</li><li><code>git config --global push.default upstream</code>: 设置push推送代码到本地分支关联的远程分支</li></ul></li><li>撤销操作<br><ul><li><code>git checkout</code> . // 代码改动后，撤销所有改动</li><li><code>git reset a</code> // git add a 后，撤销对a的add</li><li><code>git reset .</code> // git add . 后，撤销add所有</li><li><code>git reset HEAD~1</code> // 已经commit，在当前分支回退1条commit，当然2就是2条;回退后修改内容还在本地</li><li><code>git revert HEAD~1</code> //已经push，回滚这条记录，需要注意的是执行完后需要继续执行以下三行才可以，因为远端会保留revert记录<ol><li><code>git add .</code></li><li><code>git commit -a</code></li><li><code>git push</code></li></ol></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Git-学习笔记&quot;&gt;&lt;a href=&quot;#Git-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Git 学习笔记&quot;&gt;&lt;/a&gt;Git 学习笔记&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git&lt;/code&gt; 基本介绍 &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown基本语法.md</title>
    <link href="https://acgnliu.github.io/posts/116d0b7e.html"/>
    <id>https://acgnliu.github.io/posts/116d0b7e.html</id>
    <published>2022-10-16T08:48:58.000Z</published>
    <updated>2022-10-16T15:11:07.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>1、创建标题：在内容最前面添加“#”好就可以创建标题，“#”的数量代表这标题的级别。如下演示,注意书写 # 写这最前面，空一行再添加内容，不需要加双引号。</p><h2 id="“-”二级标题"><a href="#“-”二级标题" class="headerlink" title="“##”二级标题"></a>“##”二级标题</h2><h3 id="“-”三级标题"><a href="#“-”三级标题" class="headerlink" title="“###”三级标题"></a>“###”三级标题</h3><h4 id="“-”四级标题"><a href="#“-”四级标题" class="headerlink" title="“####”四级标题"></a>“####”四级标题</h4><h5 id="“-”五级标题"><a href="#“-”五级标题" class="headerlink" title="“#####”五级标题"></a>“#####”五级标题</h5><p>2、也可以使用“==”创建一级标题，“—”创建二级标题。  </p><h1 id="例如，这是一级标题"><a href="#例如，这是一级标题" class="headerlink" title="例如，这是一级标题"></a>例如，这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>3、段落一： 需要敲两次回车，推荐不要使用空格和制表符缩进段落，最后使用空白行隔开。</p><p>段落二：</p><p>4、换行，在一行的末尾添加两个或多个空格，然后按回车键。<br>也可以使用br来换行。例如：<br><br></p><h1 id="Markdown-强调语法"><a href="#Markdown-强调语法" class="headerlink" title="Markdown 强调语法"></a>Markdown 强调语法</h1><p>0、<em>斜体：</em>在单词前后各添加一个星号“<em>”<br><br>1、<strong>粗体（Bold）：</strong> 在单词前后各添加两个星号“<strong>”就可以讲星号中的内容变为粗体。<br><br>2、</strong></em>斜粗体(ltalic)：<strong><em> 在单词前后各添加加三个星号“</em></strong>”或者三个下划线”<strong><em>“,例如：</em></strong>斜粗体<em>_</em> .<br><br></p><h1 id="Markdown-引用语法"><a href="#Markdown-引用语法" class="headerlink" title="Markdown 引用语法"></a>Markdown 引用语法</h1><p>0、创建块引用，需要在段落前添加一个 <strong>&gt;</strong> <br></p><blockquote><ul><li>这是一个块引用 <br></li><li>第二行不需要添加 <em>&gt;</em><blockquote><p>嵌套的块引用，在段落前添加两个即可 <strong>&gt;&gt;</strong> <br><br>第二行也不需要添加  </p></blockquote></li></ul></blockquote><p>退出按两下回车即可。<br></p><h1 id="Markdown-列表语法"><a href="#Markdown-列表语法" class="headerlink" title="Markdown 列表语法"></a>Markdown 列表语法</h1><p>1、<strong>有序列表</strong>：每段前加上“1.”就可以了，每个列表项前添加数字并紧跟着一个英文句点。数字不用连续但必须以 1 开头。</p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><p>2、<strong>无序列表</strong>：在每个列表前添加破折号“-”，星号“*”，加号“+”。缩进一个或多个列表项可创建嵌套列表。</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表嵌套 1</li><li>无序列表嵌套 2<br>非无序列表</li></ul></li><li>无序列表 3<br>  非无序列表</li></ul><p>3、<strong>代码块</strong>： 通常采用四个空格或者一个制表符，当结合列表使用时需要八个列表块或两个制表符。</p><pre><code>如这是一个代码块 换行直接回车就可以。</code></pre><p>两下回车退出代码块。</p><ul><li><p>在列表中嵌套代码块</p><pre><code>  例子,同缩进插入图片失败（滑稽）</code></pre><p>  <img src="https://images.alphacoders.com/846/84631.jpg" alt="images"></p></li></ul><h1 id="Markdown-代码语法"><a href="#Markdown-代码语法" class="headerlink" title="Markdown 代码语法"></a>Markdown 代码语法</h1><p>1、转义反引号：可以将单词或者短语包含进去，例如（<code>Hello,Markdown</code>）</p><p>2、代码块： 首尾各三个转义反引号，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello python&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Markdown-链接语法："><a href="#Markdown-链接语法：" class="headerlink" title="Markdown 链接语法："></a>Markdown 链接语法：</h1><p>1、这是一个链接 <a href="https://markdown.com.cn">Markdown语法</a></p><p>2、给链接增加 Title, 鼠标悬停在链接上会显示文字。</p><p>这是一个链接 <a href="https://coding.net/help/docs/ci/lint/markdown-code-lang.html" title="Markdown 代码块编程语言清单">Markdown语法</a></p><p>3、网址和Email地址，使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p><p>博客地址： <a href="https://liuixngyuvs.top">https://liuixngyuvs.top</a></p><p>邮箱： <a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#x66;&#97;&#x6b;&#101;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#x6d;">&#x66;&#97;&#x6b;&#101;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#x6d;</a></p><p>4、带格式化的链接：强调链接，在链接语法前后增加星号。将链接表示为代码，在方括号中添加反引号。</p><p>I love supporting the <strong><a href="https://eff.org">EFF</a></strong></p><p>This is the <em><a href="https://www.markdownguide.org">Markdown Guide</a></em></p><p>See the section on <a href="#code"><code>code</code></a></p><p>5、引用类型链接：一种特殊的链接，使URL在Markdown中更容易显示与阅读，有两种格式。</p><ol><li>链接的第一部分格式：使用两组括号进行格式设置，第一组括号显示为链接的文本，第二组括号显示为一个标签。此标签用于指向存储在文件中的其他位置的链接。<ul><li>[hobbit-hole][1]</li><li>[hobbit-hole] [1]</li></ul></li><li>链接的第二部分格式：放在括号中的标签，其后紧跟着一个冒号和至少一个空格 例如<code>[label: ]</code>;链接的URL可选择将其括在双引号之中；链接的可选标题，可以将其括在双引号中、单引号或者括号中。<ul><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle</li><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle “Hobbit lifestyles”</li><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle ‘Hobbit lifestyles’</li><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)</li><li>[1]: <a href="htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle">htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> (Hobbit lifestyles)</li></ul></li></ol><h2 id="Markdown-图片语法"><a href="#Markdown-图片语法" class="headerlink" title="Markdown 图片语法"></a>Markdown 图片语法</h2><p>1、略</p><p>2、链接图片：</p><pre><code>- [![沙漠中的岩石图片](https://markdown.com.cn/assets/img/shiprock.c3b9a023.jpg &quot;Shiprock&quot;)](https://markdown.com.cn)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-标题语法&quot;&gt;&lt;a href=&quot;#Markdown-标题语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 标题语法&quot;&gt;&lt;/a&gt;Markdown 标题语法&lt;/h1&gt;&lt;p&gt;1、创建标题：在内容最前面添加“#”好就可以创建标题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>One_Day.md</title>
    <link href="https://acgnliu.github.io/posts/dbff7b3c.html"/>
    <id>https://acgnliu.github.io/posts/dbff7b3c.html</id>
    <published>2022-09-18T15:06:15.000Z</published>
    <updated>2022-09-18T15:44:29.908Z</updated>
    
    <content type="html"><![CDATA[<p>实践是检验的最好方法。</p><p>。。。 此文章用于测试  。。。</p><p>`` bash<br>$ touch CNAME<br>$ echo www.yuming.top<br>```</p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实践是检验的最好方法。&lt;/p&gt;
&lt;p&gt;。。。 此文章用于测试  。。。&lt;/p&gt;
&lt;p&gt;`` bash&lt;br&gt;$ touch CNAME&lt;br&gt;$ echo www.yuming.top&lt;br&gt;```&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python-随笔</title>
    <link href="https://acgnliu.github.io/posts/2ec3f13d.html"/>
    <id>https://acgnliu.github.io/posts/2ec3f13d.html</id>
    <published>2022-09-07T14:40:27.000Z</published>
    <updated>2022-09-18T14:57:22.821Z</updated>
    
    <content type="html"><![CDATA[<div class="tip ban faa-flash animated"><p>为了缓解心情，简单写一篇python基础内容 </p></div><div class="tip warning faa-horizontal animated"><p>突然不想写了 ，笑哭 </p></div><div class="tip warning faa-horizontal animated-hover"><p>第一个知识点：编程基础那点事 </p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash"> 悄悄加一句： 标题是抄的 </p></div><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>主要介绍一下python中的基础语法</p></div></div><div class="timeline bule"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>内容简介</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [标识符]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [关键字]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [模块]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [变量]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [代码注释]</p></div></div><div class='timeline-item-content'></div></div></div><details class="folding-tag" cyan open><summary> 标识符 </summary>              <div class='content'>              <div class="tip sync"><p>标识符就是变量，函数、属性、类、模块等可以自由指定名称的代码元素，均遵循一定的命名规则<br>    1、区分大小写： Myname 与 myname 是两个不同的标识符。<br>    2、首字母可以是下划线或字母，但不能是数字。<br>    3、除首字母外其它字符也必须是下划线、字母与数字。<br>    4、关键字不能用做标识符。<br>    5、……</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 关键字 </summary>              <div class='content'>              <div class="tip bolt"><p>python有33个关键字,其中只有False、None、True需要大写。具体如下：<br>    False   def     if      raise<br>    None    del     import  return<br>    True    elif    in      try<br>    and     else    is      while<br>    as      except  lambda  with<br>    assert  finally nonlocal    yield<br>    break   for     not<br>    class   from    or<br>    contime global  pass</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 变量 </summary>              <div class='content'>              <div class="tip bolt"><p>我也不知道变量是啥，简单理解就是给数据一个地方，给这个地方命名就是变量<br>如下就是变量的使用。<br>我是变量 = “Helloworld”<br>name = “我是变量数据”</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 语句 </summary>              <div class='content'>              <div class="tip bolt"><p>先要知道，python代码是由关键字、标识符、表达式和语句等构成的，语句是代码重要的组成部分。</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 代码注释 </summary>              <div class='content'>              <div class="tip bolt"><p>单行注释： #<br>多行注释： ‘’’ 其实这内容是一串长字符串，代码不运行这里面的语句 ‘’’</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 模块 </summary>              <div class='content'>              <div class="tip bolt"><p>三种导入方式：<br>    1、import<br>    2、from import<br>    3、from import as</p></div>              </div>            </details><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>好了说完了，最后写个简单的代码，梳理一下上面知识。</p></div><div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' ><div class="note green icon-padding modern"><i class="note-icon fas fa-fan"></i><p>示例代码如下：<br>功能： 将当前目录下指定文件移动到新的目录下</p></div></div><div class="tip "><p>improt os<br>import shutil</p><p>def move_file():</p><pre><code>&#39;&#39;&#39; 定义变量 &#39;&#39;&#39;file_path = &quot;移动前文件路径&quot;new_file_path = &quot;移动后的文件路径&quot;‘’‘我不是一个注释 ’‘’   file_datas = os.listdir(file_path)      # 此处可以百度for file_data in file_datas:        ‘’‘此处可自由修改判断条件’‘’    if file_data.split(&quot;.&quot;)[-1].strip() == &quot;txt&quot;:        # 判断文件后缀是不是文本文件（txt）        ‘’‘shutil.move 移动文件和重命名文件        其它用法： copy 复制文件        删除可使用 os.remove(&quot;文件&quot;)        ’‘’        shutil.move(f&quot;{file_path}/{file_data}&quot;, f&quot;{new_file_path}/{file_data}&quot;)  # 这里注意文件路径</code></pre><p>‘’’ END ‘’’</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip ban faa-flash animated&quot;&gt;&lt;p&gt;为了缓解心情，简单写一篇python基础内容 &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tip warning faa-horizontal animated&quot;&gt;&lt;p&gt;突然不想写了 ，笑哭</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://acgnliu.github.io/posts/5c2fafc7.html"/>
    <id>https://acgnliu.github.io/posts/5c2fafc7.html</id>
    <published>2022-09-03T12:36:42.000Z</published>
    <updated>2022-09-04T16:29:37.380Z</updated>
    
    <content type="html"><![CDATA[<div class="tip info"><p>参考博客教程链接:</p></div><div class="tip bolt"><p>博主： 安知鱼<br>    链接： <a href="https://anzhiy.cn/posts/sdxhu.html">https://anzhiy.cn/posts/sdxhu.html</a><br>    bilibili: <a href="https://www.bilibili.com/video/BV1CG41157fr/?spm_id_from=pageDriver&amp;vd_source=cde63aff900a4e125307eefbea7e6079">https://www.bilibili.com/video/BV1CG41157fr/?spm_id_from=pageDriver&amp;vd_source=cde63aff900a4e125307eefbea7e6079</a></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;参考博客教程链接:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tip bolt&quot;&gt;&lt;p&gt;博主： 安知鱼&lt;br&gt;    链接： &lt;a href=&quot;https://anzhiy.cn/posts/sdxhu.html&quot;&gt;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://acgnliu.github.io/posts/4a17b156.html"/>
    <id>https://acgnliu.github.io/posts/4a17b156.html</id>
    <published>2022-09-03T03:23:30.528Z</published>
    <updated>2022-09-18T14:57:27.624Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
