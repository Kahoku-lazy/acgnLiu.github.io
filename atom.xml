<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kahoku丶懒`Blong</title>
  <icon>https://www.gravatar.com/avatar/4be4e7cb96975b93d296721d3973e199</icon>
  <subtitle>此人极其懒，请勿期待更新……</subtitle>
  <link href="https://acgnliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://acgnliu.github.io/"/>
  <updated>2022-11-17T16:19:33.196Z</updated>
  <id>https://acgnliu.github.io/</id>
  
  <author>
    <name>刘星宇</name>
    <email>283977856@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://acgnliu.github.io/posts/2f57a694.html"/>
    <id>https://acgnliu.github.io/posts/2f57a694.html</id>
    <published>2022-11-15T14:29:20.000Z</published>
    <updated>2022-11-17T16:19:33.196Z</updated>
    
    <content type="html"><![CDATA[<p><h3> 一. 使用正则表达式查找文本模式<h3></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">regex_str = <span class="string">&quot;1. wubba lubba dub dubs. 2. Hey, what are you in for? - Everyting. 3. Homework is stupid, the whole point is to get less of it.&quot;</span></span><br></pre></td></tr></table></figure><p><h4>1、正则操作步骤<h4></p><ul><li>基础流程如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d&#x27;</span>)        <span class="comment"># 正则表达式</span></span><br><span class="line">result = regex.search(regex_str)    <span class="comment"># 查找</span></span><br><span class="line"><span class="built_in">print</span>(result.group())   <span class="comment"># 返回结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果： 1</span></span><br></pre></td></tr></table></figure></li><li>流程解析 <br><ol><li>导入<code>re</code>模块</li><li>传入正则表达式，返回值为<code>regex</code>对象。</li><li>使用<code>regex</code>对象方法（<code>search</code>）查找匹配正则表达式， 返回<code>Match</code>对象</li><li>使用<code>Match</code>对象的方法（<code>group</code>）获取匹配的值。</li></ol></li><li><strong>知识点 01 字符替换</strong><ol><li><code>\d</code>: 表示一个数字 0~9</li><li><code>\w</code>: 表示一个下划线、数字、或字母</li><li><code>\s</code>: 表示一个空格、制表、换行</li></ol></li></ul><p><h4>2、分组 <h4></p><ul><li>代码演示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;(\d).*(\d).*(\d)&quot;</span>)  <span class="comment"># 分三组</span></span><br><span class="line">result = regex.search(regex_str)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 运行结果：1. wubba lubba dub dubs. Hey, 2. what are you in for? - Everyting. 3</span></span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>))  <span class="comment"># 打印匹配到的第一组的值</span></span><br><span class="line"><span class="comment"># 运行结果： 1  </span></span><br><span class="line"><span class="built_in">print</span>(result.groups())  <span class="comment"># 打印匹配到的所有组的值</span></span><br><span class="line"><span class="comment"># 运行结果：(&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;)</span></span><br></pre></td></tr></table></figure><strong>- 知识点 2 括号</strong></li></ul><ol><li>第一个括号内的表达式为第一组，可使用<code>group(1)</code>取值</li><li><code>groups()</code> 获取所有分组。</li></ol><p><h4>3、字符<h4></p><ul><li>代码演示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;(b)&#123;2&#125;&quot;</span>)  <span class="comment"># 分三组</span></span><br><span class="line">result = regex.search(regex_str)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># 运行结果： bb</span></span><br><span class="line"><span class="built_in">print</span>(result.groups())</span><br><span class="line"><span class="comment"># 运行结果: (&#x27;b&#x27;,)</span></span><br></pre></td></tr></table></figure><strong>- 知识点 3 贪心匹配</strong></li></ul><ol><li><code>()&#123;N&#125;</code> 表示匹配括号内表达式 N次。</li><li><code>()&#123;1,3&#125;</code> 优先匹配3次</li><li><code>()&#123;1,&#125;</code> 优先配对最大值(<code>max</code>)</li><li><code>()&#123;,2&#125;</code> 优先配对2次，(<em>找不到值则返回为<code>None</code></em>)</li><li><code>()&#123;1,3&#125;?</code> 非贪心匹配</li></ol><p><h4>4、通配符<h4></p><ol><li><code>+</code>： 加号表示匹配一次或多次。</li><li><code>*</code>： 星号表示匹配零次或多次。</li><li><code>?</code>： 问号表示匹配零次或一次。</li><li><code>.</code>:  表示任意一个字符，非换行符之外的所有字符</li><li><code>^a</code>：表示以a开头的字符。</li><li><code>$a</code>: 表示以a结尾的字符。</li><li><code>&#123;N&#125;</code>: 表示匹配次数。</li><li><code>[auc]</code>: 表示单字符选择范围(<code>a u c</code>)</li><li><code>[^auc]</code>:表示单字符选择范围(除<code>a u c</code>外字符)</li></ol><p><h4>5、扩展<h4></p><ul><li><p>代码演示，<code>compile</code> 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;.*&quot;</span>, re.DOTALL) <span class="comment"># 匹配所有字符，包括换行符</span></span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;aAsA&quot;</span>, re.IGNORECASE)    <span class="comment"># 不区分大小写</span></span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;&#x27;&#x27;(wubba).*  # 注释</span></span><br><span class="line"><span class="string">(dub)  # 注释&#x27;&#x27;&#x27;</span>, re.VERBOSE)  </span><br><span class="line">result = regex.search(regex_str)</span><br><span class="line"><span class="comment">#运行结果: wubba lubbba dub dub</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码演示， <code>re</code> 基础方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">&quot;(\d)(bb)&quot;</span>)</span><br><span class="line">regex.sub(<span class="string">&quot;www&quot;</span>, <span class="string">&quot;111bbbb, 111&quot;</span>) </span><br><span class="line"><span class="comment">#运行结果: 11wwwbb, 111</span></span><br><span class="line"></span><br><span class="line">regex.sub(<span class="string">&quot;\2***&quot;</span>, <span class="string">&quot;111bbbb, 111&quot;</span>)</span><br><span class="line"><span class="comment">#运行结果: 11***bb, 111</span></span><br><span class="line"></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;\w\d\w&quot;</span>, <span class="string">&quot;111 11111 111&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment">#运行结果: 111</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;h3&gt; 一. 使用正则表达式查找文本模式&lt;h3&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://acgnliu.github.io/posts/518e617c.html"/>
    <id>https://acgnliu.github.io/posts/518e617c.html</id>
    <published>2022-11-14T15:57:00.000Z</published>
    <updated>2022-11-14T16:26:27.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git-学习笔记"><a href="#Git-学习笔记" class="headerlink" title="Git 学习笔记"></a>Git 学习笔记</h3><ol><li><p><code>git</code> 基本介绍 <br></p><ul><li><p>是什么 <br></p><ol><li>一个代码管理的工具。</li><li>可以随时将本地仓库的代码提交至远程仓库</li><li><em>懒得打字</em></li></ol></li><li><p>流程</p><ol><li>下载安装并配置git</li><li>生成密钥对：<em>公钥</em> - <code>id_rsa.pub</code>  <em>私钥</em> - <code>id_rsa</code></li><li>创建远程仓库，上传公钥。</li><li>克隆代码到本地</li><li>提交代码.</li></ol></li></ul></li><li><code>git</code> 下载与安装。 <br><ul><li>指令</li><li><code>git version</code>: 查看版本号</li><li>注： <code>MAC 需要安装一下xcode: xcode-select --install</code></li></ul></li><li><code>git</code> 配置 <br><ul><li><code>git config --list</code>: 查看git当前的config配置</li><li><code>ssh-keygen -t rsa -C “your_email@youremail.com&quot;</code>: 生成密钥对。</li><li><code>git clone git@github.com:Yourcount/GitTest.ogt</code>: 克隆远程仓库。</li></ul></li><li><code>git</code> 日常使用命令。 <br><ul><li><code>git branch</code>: 查看本地分支</li><li><code>git baranch</code>: 查看所有分支。<br> <code>remotes/origin</code>为远程分支。</li><li><code>git branch -av</code>: 查看所有分支与最近的一条提交记录。</li><li><code>git branch -avv</code>: 查看分支，以及关联的仓库</li><li><code>git remote show otigin</code>: 查看远程分支直接的关系</li><li><code>git stauts</code>: 查看本地仓库状态</li><li><code>git diff</code>: 查看改动内容</li><li><code>git add .</code>: 添加</li><li><code>git reset .</code>: 撤销添加</li><li><code>git commit -m &quot;描述&quot;</code>: 提交本次改动</li><li><code>git commit -s</code></li><li><code>git log</code>: 查看提交日志</li><li><code>git push origin Head:main</code>: 提交至远程仓库</li><li><code>git pull - rebase</code>: 下拉仓库</li><li><code>git push</code>: 提交</li><li><code>git checkout -b V2</code>: 创建本地分支，并切换至此分支</li><li><code>git checkout V2</code>: 切换分支</li><li><code>git push origin V2:remote_branch_V2</code>:创建远程分支</li><li><code>git push origin :remote_branch_V2</code>:删除。push空就等于删除</li><li><code>git checkout -b v2 origin/main</code>: 拉取分支并建立关系</li><li><code>git config --global push.default upstream</code>: 设置push推送代码到本地分支关联的远程分支</li></ul></li><li>撤销操作<br><ul><li><code>git checkout</code> . // 代码改动后，撤销所有改动</li><li><code>git reset a</code> // git add a 后，撤销对a的add</li><li><code>git reset .</code> // git add . 后，撤销add所有</li><li><code>git reset HEAD~1</code> // 已经commit，在当前分支回退1条commit，当然2就是2条;回退后修改内容还在本地</li><li><code>git revert HEAD~1</code> //已经push，回滚这条记录，需要注意的是执行完后需要继续执行以下三行才可以，因为远端会保留revert记录<ol><li><code>git add .</code></li><li><code>git commit -a</code></li><li><code>git push</code></li></ol></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Git-学习笔记&quot;&gt;&lt;a href=&quot;#Git-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Git 学习笔记&quot;&gt;&lt;/a&gt;Git 学习笔记&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git&lt;/code&gt; 基本介绍 &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown基本语法.md</title>
    <link href="https://acgnliu.github.io/posts/116d0b7e.html"/>
    <id>https://acgnliu.github.io/posts/116d0b7e.html</id>
    <published>2022-10-16T08:48:58.000Z</published>
    <updated>2022-10-16T15:11:07.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>1、创建标题：在内容最前面添加“#”好就可以创建标题，“#”的数量代表这标题的级别。如下演示,注意书写 # 写这最前面，空一行再添加内容，不需要加双引号。</p><h2 id="“-”二级标题"><a href="#“-”二级标题" class="headerlink" title="“##”二级标题"></a>“##”二级标题</h2><h3 id="“-”三级标题"><a href="#“-”三级标题" class="headerlink" title="“###”三级标题"></a>“###”三级标题</h3><h4 id="“-”四级标题"><a href="#“-”四级标题" class="headerlink" title="“####”四级标题"></a>“####”四级标题</h4><h5 id="“-”五级标题"><a href="#“-”五级标题" class="headerlink" title="“#####”五级标题"></a>“#####”五级标题</h5><p>2、也可以使用“==”创建一级标题，“—”创建二级标题。  </p><h1 id="例如，这是一级标题"><a href="#例如，这是一级标题" class="headerlink" title="例如，这是一级标题"></a>例如，这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>3、段落一： 需要敲两次回车，推荐不要使用空格和制表符缩进段落，最后使用空白行隔开。</p><p>段落二：</p><p>4、换行，在一行的末尾添加两个或多个空格，然后按回车键。<br>也可以使用br来换行。例如：<br><br></p><h1 id="Markdown-强调语法"><a href="#Markdown-强调语法" class="headerlink" title="Markdown 强调语法"></a>Markdown 强调语法</h1><p>0、<em>斜体：</em>在单词前后各添加一个星号“<em>”<br><br>1、<strong>粗体（Bold）：</strong> 在单词前后各添加两个星号“<strong>”就可以讲星号中的内容变为粗体。<br><br>2、</strong></em>斜粗体(ltalic)：<strong><em> 在单词前后各添加加三个星号“</em></strong>”或者三个下划线”<strong><em>“,例如：</em></strong>斜粗体<em>_</em> .<br><br></p><h1 id="Markdown-引用语法"><a href="#Markdown-引用语法" class="headerlink" title="Markdown 引用语法"></a>Markdown 引用语法</h1><p>0、创建块引用，需要在段落前添加一个 <strong>&gt;</strong> <br></p><blockquote><ul><li>这是一个块引用 <br></li><li>第二行不需要添加 <em>&gt;</em><blockquote><p>嵌套的块引用，在段落前添加两个即可 <strong>&gt;&gt;</strong> <br><br>第二行也不需要添加  </p></blockquote></li></ul></blockquote><p>退出按两下回车即可。<br></p><h1 id="Markdown-列表语法"><a href="#Markdown-列表语法" class="headerlink" title="Markdown 列表语法"></a>Markdown 列表语法</h1><p>1、<strong>有序列表</strong>：每段前加上“1.”就可以了，每个列表项前添加数字并紧跟着一个英文句点。数字不用连续但必须以 1 开头。</p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><p>2、<strong>无序列表</strong>：在每个列表前添加破折号“-”，星号“*”，加号“+”。缩进一个或多个列表项可创建嵌套列表。</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表嵌套 1</li><li>无序列表嵌套 2<br>非无序列表</li></ul></li><li>无序列表 3<br>  非无序列表</li></ul><p>3、<strong>代码块</strong>： 通常采用四个空格或者一个制表符，当结合列表使用时需要八个列表块或两个制表符。</p><pre><code>如这是一个代码块 换行直接回车就可以。</code></pre><p>两下回车退出代码块。</p><ul><li><p>在列表中嵌套代码块</p><pre><code>  例子,同缩进插入图片失败（滑稽）</code></pre><p>  <img src="https://images.alphacoders.com/846/84631.jpg" alt="images"></p></li></ul><h1 id="Markdown-代码语法"><a href="#Markdown-代码语法" class="headerlink" title="Markdown 代码语法"></a>Markdown 代码语法</h1><p>1、转义反引号：可以将单词或者短语包含进去，例如（<code>Hello,Markdown</code>）</p><p>2、代码块： 首尾各三个转义反引号，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello python&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Markdown-链接语法："><a href="#Markdown-链接语法：" class="headerlink" title="Markdown 链接语法："></a>Markdown 链接语法：</h1><p>1、这是一个链接 <a href="https://markdown.com.cn">Markdown语法</a></p><p>2、给链接增加 Title, 鼠标悬停在链接上会显示文字。</p><p>这是一个链接 <a href="https://coding.net/help/docs/ci/lint/markdown-code-lang.html" title="Markdown 代码块编程语言清单">Markdown语法</a></p><p>3、网址和Email地址，使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p><p>博客地址： <a href="https://liuixngyuvs.top">https://liuixngyuvs.top</a></p><p>邮箱： <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#x61;&#107;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x66;&#x61;&#107;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a></p><p>4、带格式化的链接：强调链接，在链接语法前后增加星号。将链接表示为代码，在方括号中添加反引号。</p><p>I love supporting the <strong><a href="https://eff.org">EFF</a></strong></p><p>This is the <em><a href="https://www.markdownguide.org">Markdown Guide</a></em></p><p>See the section on <a href="#code"><code>code</code></a></p><p>5、引用类型链接：一种特殊的链接，使URL在Markdown中更容易显示与阅读，有两种格式。</p><ol><li>链接的第一部分格式：使用两组括号进行格式设置，第一组括号显示为链接的文本，第二组括号显示为一个标签。此标签用于指向存储在文件中的其他位置的链接。<ul><li>[hobbit-hole][1]</li><li>[hobbit-hole] [1]</li></ul></li><li>链接的第二部分格式：放在括号中的标签，其后紧跟着一个冒号和至少一个空格 例如<code>[label: ]</code>;链接的URL可选择将其括在双引号之中；链接的可选标题，可以将其括在双引号中、单引号或者括号中。<ul><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle</li><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle “Hobbit lifestyles”</li><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle ‘Hobbit lifestyles’</li><li>[1]: htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)</li><li>[1]: <a href="htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle">htpps://en.wikipedia.org/wiki/Hobbit#Lifestyle</a> (Hobbit lifestyles)</li></ul></li></ol><h2 id="Markdown-图片语法"><a href="#Markdown-图片语法" class="headerlink" title="Markdown 图片语法"></a>Markdown 图片语法</h2><p>1、略</p><p>2、链接图片：</p><pre><code>- [![沙漠中的岩石图片](https://markdown.com.cn/assets/img/shiprock.c3b9a023.jpg &quot;Shiprock&quot;)](https://markdown.com.cn)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-标题语法&quot;&gt;&lt;a href=&quot;#Markdown-标题语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 标题语法&quot;&gt;&lt;/a&gt;Markdown 标题语法&lt;/h1&gt;&lt;p&gt;1、创建标题：在内容最前面添加“#”好就可以创建标题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>One_Day.md</title>
    <link href="https://acgnliu.github.io/posts/dbff7b3c.html"/>
    <id>https://acgnliu.github.io/posts/dbff7b3c.html</id>
    <published>2022-09-18T15:06:15.000Z</published>
    <updated>2022-09-18T15:44:29.908Z</updated>
    
    <content type="html"><![CDATA[<p>实践是检验的最好方法。</p><p>。。。 此文章用于测试  。。。</p><p>`` bash<br>$ touch CNAME<br>$ echo www.yuming.top<br>```</p><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实践是检验的最好方法。&lt;/p&gt;
&lt;p&gt;。。。 此文章用于测试  。。。&lt;/p&gt;
&lt;p&gt;`` bash&lt;br&gt;$ touch CNAME&lt;br&gt;$ echo www.yuming.top&lt;br&gt;```&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python-随笔</title>
    <link href="https://acgnliu.github.io/posts/2ec3f13d.html"/>
    <id>https://acgnliu.github.io/posts/2ec3f13d.html</id>
    <published>2022-09-07T14:40:27.000Z</published>
    <updated>2022-09-18T14:57:22.821Z</updated>
    
    <content type="html"><![CDATA[<div class="tip ban faa-flash animated"><p>为了缓解心情，简单写一篇python基础内容 </p></div><div class="tip warning faa-horizontal animated"><p>突然不想写了 ，笑哭 </p></div><div class="tip warning faa-horizontal animated-hover"><p>第一个知识点：编程基础那点事 </p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash"> 悄悄加一句： 标题是抄的 </p></div><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>主要介绍一下python中的基础语法</p></div></div><div class="timeline bule"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>内容简介</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [标识符]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [关键字]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [模块]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [变量]</p></div></div><div class='timeline-item-content'></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>20220907 [代码注释]</p></div></div><div class='timeline-item-content'></div></div></div><details class="folding-tag" cyan open><summary> 标识符 </summary>              <div class='content'>              <div class="tip sync"><p>标识符就是变量，函数、属性、类、模块等可以自由指定名称的代码元素，均遵循一定的命名规则<br>    1、区分大小写： Myname 与 myname 是两个不同的标识符。<br>    2、首字母可以是下划线或字母，但不能是数字。<br>    3、除首字母外其它字符也必须是下划线、字母与数字。<br>    4、关键字不能用做标识符。<br>    5、……</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 关键字 </summary>              <div class='content'>              <div class="tip bolt"><p>python有33个关键字,其中只有False、None、True需要大写。具体如下：<br>    False   def     if      raise<br>    None    del     import  return<br>    True    elif    in      try<br>    and     else    is      while<br>    as      except  lambda  with<br>    assert  finally nonlocal    yield<br>    break   for     not<br>    class   from    or<br>    contime global  pass</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 变量 </summary>              <div class='content'>              <div class="tip bolt"><p>我也不知道变量是啥，简单理解就是给数据一个地方，给这个地方命名就是变量<br>如下就是变量的使用。<br>我是变量 = “Helloworld”<br>name = “我是变量数据”</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 语句 </summary>              <div class='content'>              <div class="tip bolt"><p>先要知道，python代码是由关键字、标识符、表达式和语句等构成的，语句是代码重要的组成部分。</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 代码注释 </summary>              <div class='content'>              <div class="tip bolt"><p>单行注释： #<br>多行注释： ‘’’ 其实这内容是一串长字符串，代码不运行这里面的语句 ‘’’</p></div>              </div>            </details><details class="folding-tag" cyan open><summary> 模块 </summary>              <div class='content'>              <div class="tip bolt"><p>三种导入方式：<br>    1、import<br>    2、from import<br>    3、from import as</p></div>              </div>            </details><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>好了说完了，最后写个简单的代码，梳理一下上面知识。</p></div><div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' ><div class="note green icon-padding modern"><i class="note-icon fas fa-fan"></i><p>示例代码如下：<br>功能： 将当前目录下指定文件移动到新的目录下</p></div></div><div class="tip "><p>improt os<br>import shutil</p><p>def move_file():</p><pre><code>&#39;&#39;&#39; 定义变量 &#39;&#39;&#39;file_path = &quot;移动前文件路径&quot;new_file_path = &quot;移动后的文件路径&quot;‘’‘我不是一个注释 ’‘’   file_datas = os.listdir(file_path)      # 此处可以百度for file_data in file_datas:        ‘’‘此处可自由修改判断条件’‘’    if file_data.split(&quot;.&quot;)[-1].strip() == &quot;txt&quot;:        # 判断文件后缀是不是文本文件（txt）        ‘’‘shutil.move 移动文件和重命名文件        其它用法： copy 复制文件        删除可使用 os.remove(&quot;文件&quot;)        ’‘’        shutil.move(f&quot;{file_path}/{file_data}&quot;, f&quot;{new_file_path}/{file_data}&quot;)  # 这里注意文件路径</code></pre><p>‘’’ END ‘’’</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip ban faa-flash animated&quot;&gt;&lt;p&gt;为了缓解心情，简单写一篇python基础内容 &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tip warning faa-horizontal animated&quot;&gt;&lt;p&gt;突然不想写了 ，笑哭</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://acgnliu.github.io/posts/5c2fafc7.html"/>
    <id>https://acgnliu.github.io/posts/5c2fafc7.html</id>
    <published>2022-09-03T12:36:42.000Z</published>
    <updated>2022-09-04T16:29:37.380Z</updated>
    
    <content type="html"><![CDATA[<div class="tip info"><p>参考博客教程链接:</p></div><div class="tip bolt"><p>博主： 安知鱼<br>    链接： <a href="https://anzhiy.cn/posts/sdxhu.html">https://anzhiy.cn/posts/sdxhu.html</a><br>    bilibili: <a href="https://www.bilibili.com/video/BV1CG41157fr/?spm_id_from=pageDriver&amp;vd_source=cde63aff900a4e125307eefbea7e6079">https://www.bilibili.com/video/BV1CG41157fr/?spm_id_from=pageDriver&amp;vd_source=cde63aff900a4e125307eefbea7e6079</a></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;参考博客教程链接:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tip bolt&quot;&gt;&lt;p&gt;博主： 安知鱼&lt;br&gt;    链接： &lt;a href=&quot;https://anzhiy.cn/posts/sdxhu.html&quot;&gt;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://acgnliu.github.io/posts/4a17b156.html"/>
    <id>https://acgnliu.github.io/posts/4a17b156.html</id>
    <published>2022-09-03T03:23:30.528Z</published>
    <updated>2022-09-18T14:57:27.624Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
